
<!DOCTYPE html>
<html lang="en">
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <meta name="robots" content="NONE,NOARCHIVE">
  <title>GEOSException at /api/samples/</title>
  <style type="text/css">
    html * { padding:0; margin:0; }
    body * { padding:10px 20px; }
    body * * { padding:0; }
    body { font:small sans-serif; }
    body>div { border-bottom:1px solid #ddd; }
    h1 { font-weight:normal; }
    h2 { margin-bottom:.8em; }
    h2 span { font-size:80%; color:#666; font-weight:normal; }
    h3 { margin:1em 0 .5em 0; }
    h4 { margin:0 0 .5em 0; font-weight: normal; }
    code, pre { font-size: 100%; white-space: pre-wrap; }
    table { border:1px solid #ccc; border-collapse: collapse; width:100%; background:white; }
    tbody td, tbody th { vertical-align:top; padding:2px 3px; }
    thead th {
      padding:1px 6px 1px 3px; background:#fefefe; text-align:left;
      font-weight:normal; font-size:11px; border:1px solid #ddd;
    }
    tbody th { width:12em; text-align:right; color:#666; padding-right:.5em; }
    table.vars { margin:5px 0 2px 40px; }
    table.vars td, table.req td { font-family:monospace; }
    table td.code { width:100%; }
    table td.code pre { overflow:hidden; }
    table.source th { color:#666; }
    table.source td { font-family:monospace; white-space:pre; border-bottom:1px solid #eee; }
    ul.traceback { list-style-type:none; color: #222; }
    ul.traceback li.frame { padding-bottom:1em; color:#666; }
    ul.traceback li.user { background-color:#e0e0e0; color:#000 }
    div.context { padding:10px 0; overflow:hidden; }
    div.context ol { padding-left:30px; margin:0 10px; list-style-position: inside; }
    div.context ol li { font-family:monospace; white-space:pre; color:#777; cursor:pointer; padding-left: 2px; }
    div.context ol li pre { display:inline; }
    div.context ol.context-line li { color:#505050; background-color:#dfdfdf; padding: 3px 2px; }
    div.context ol.context-line li span { position:absolute; right:32px; }
    .user div.context ol.context-line li { background-color:#bbb; color:#000; }
    .user div.context ol li { color:#666; }
    div.commands { margin-left: 40px; }
    div.commands a { color:#555; text-decoration:none; }
    .user div.commands a { color: black; }
    #summary { background: #ffc; }
    #summary h2 { font-weight: normal; color: #666; }
    #explanation { background:#eee; }
    #template, #template-not-exist { background:#f6f6f6; }
    #template-not-exist ul { margin: 0 0 10px 20px; }
    #template-not-exist .postmortem-section { margin-bottom: 3px; }
    #unicode-hint { background:#eee; }
    #traceback { background:#eee; }
    #requestinfo { background:#f6f6f6; padding-left:120px; }
    #summary table { border:none; background:transparent; }
    #requestinfo h2, #requestinfo h3 { position:relative; margin-left:-100px; }
    #requestinfo h3 { margin-bottom:-1em; }
    .error { background: #ffc; }
    .specific { color:#cc3300; font-weight:bold; }
    h2 span.commands { font-size:.7em;}
    span.commands a:link {color:#5E5694;}
    pre.exception_value { font-family: sans-serif; color: #666; font-size: 1.5em; margin: 10px 0 10px 0; }
    .append-bottom { margin-bottom: 10px; }
  </style>
  
  <script type="text/javascript">
  //<!--
    function getElementsByClassName(oElm, strTagName, strClassName){
        // Written by Jonathan Snook, http://www.snook.ca/jon; Add-ons by Robert Nyman, http://www.robertnyman.com
        var arrElements = (strTagName == "*" && document.all)? document.all :
        oElm.getElementsByTagName(strTagName);
        var arrReturnElements = new Array();
        strClassName = strClassName.replace(/\-/g, "\-");
        var oRegExp = new RegExp("(^|\s)" + strClassName + "(\s|$)");
        var oElement;
        for(var i=0; i<arrElements.length; i++){
            oElement = arrElements[i];
            if(oRegExp.test(oElement.className)){
                arrReturnElements.push(oElement);
            }
        }
        return (arrReturnElements)
    }
    function hideAll(elems) {
      for (var e = 0; e < elems.length; e++) {
        elems[e].style.display = 'none';
      }
    }
    window.onload = function() {
      hideAll(getElementsByClassName(document, 'table', 'vars'));
      hideAll(getElementsByClassName(document, 'ol', 'pre-context'));
      hideAll(getElementsByClassName(document, 'ol', 'post-context'));
      hideAll(getElementsByClassName(document, 'div', 'pastebin'));
    }
    function toggle() {
      for (var i = 0; i < arguments.length; i++) {
        var e = document.getElementById(arguments[i]);
        if (e) {
          e.style.display = e.style.display == 'none' ? 'block': 'none';
        }
      }
      return false;
    }
    function varToggle(link, id) {
      toggle('v' + id);
      var s = link.getElementsByTagName('span')[0];
      var uarr = String.fromCharCode(0x25b6);
      var darr = String.fromCharCode(0x25bc);
      s.innerHTML = s.innerHTML == uarr ? darr : uarr;
      return false;
    }
    function switchPastebinFriendly(link) {
      s1 = "Switch to copy-and-paste view";
      s2 = "Switch back to interactive view";
      link.innerHTML = link.innerHTML.trim() == s1 ? s2: s1;
      toggle('browserTraceback', 'pastebinTraceback');
      return false;
    }
    //-->
  </script>
  
</head>
<body>
<div id="summary">
  <h1>GEOSException at /api/samples/</h1>
  <pre class="exception_value">Error encountered checking Geometry returned from GEOS C function &quot;GEOSWKBReader_readHEX_r&quot;.</pre>
  <table class="meta">

    <tr>
      <th>Request Method:</th>
      <td>POST</td>
    </tr>
    <tr>
      <th>Request URL:</th>
      <td>http://52.90.182.216/api/samples/</td>
    </tr>

    <tr>
      <th>Django Version:</th>
      <td>1.9</td>
    </tr>

    <tr>
      <th>Exception Type:</th>
      <td>GEOSException</td>
    </tr>


    <tr>
      <th>Exception Value:</th>
      <td><pre>Error encountered checking Geometry returned from GEOS C function &quot;GEOSWKBReader_readHEX_r&quot;.</pre></td>
    </tr>


    <tr>
      <th>Exception Location:</th>
      <td>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/prototypes/errcheck.py in check_geom, line 32</td>
    </tr>

    <tr>
      <th>Python Executable:</th>
      <td>/home/metpetdb/.virtualenvs/api/bin/python</td>
    </tr>
    <tr>
      <th>Python Version:</th>
      <td>3.4.3</td>
    </tr>
    <tr>
      <th>Python Path:</th>
      <td><pre>[&#39;/home/metpetdb/api/metpetdb_api&#39;,
 &#39;/home/metpetdb/api/metpetdb_api&#39;,
 &#39;/home/metpetdb/.virtualenvs/api/bin&#39;,
 &#39;/home/metpetdb/.virtualenvs/api/lib/python3.4&#39;,
 &#39;/home/metpetdb/.virtualenvs/api/lib/python3.4/plat-x86_64-linux-gnu&#39;,
 &#39;/home/metpetdb/.virtualenvs/api/lib/python3.4/lib-dynload&#39;,
 &#39;/usr/lib/python3.4&#39;,
 &#39;/usr/lib/python3.4/plat-x86_64-linux-gnu&#39;,
 &#39;/home/metpetdb/api/metpetdb_api/vendor/djoser&#39;,
 &#39;/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages&#39;]</pre></td>
    </tr>
    <tr>
      <th>Server time:</th>
      <td>Tue, 5 Apr 2016 00:35:03 +0000</td>
    </tr>
  </table>
</div>




<div id="traceback">
  <h2>Traceback <span class="commands"><a href="#" onclick="return switchPastebinFriendly(this);">
    Switch to copy-and-paste view</a></span>
  </h2>
  
  <div id="browserTraceback">
    <ul class="traceback">
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/core/handlers/base.py</code> in <code>get_response</code>

          
            <div class="context" id="c139711121149512">
              
                <ol start="142" class="pre-context" id="pre139711121149512">
                
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                        break</pre></li>
                
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>            if response is None:</pre></li>
                
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                try:</pre></li>
                
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                    response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                except Exception as e:</pre></li>
                
                </ol>
              
              <ol start="149" class="context-line">
                <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>
                    response = self.process_exception_by_middleware(e, request)</pre> <span>...</span></li></ol>
              
                <ol start='150' class="post-context" id="post139711121149512">
                  
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>            # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>            if response is None:</pre></li>
                  
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                    view_name = callback.__name__</pre></li>
                  
                  <li onclick="toggle('pre139711121149512', 'post139711121149512')"><pre>                else:                                           # CBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121149512')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121149512">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=api.samples.v1.views.SampleViewSet, args=(), kwargs={}, url_name=sample-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function SampleViewSet at 0x7f1108196ae8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/api/samples/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function SampleViewSet at 0x7f1108196ae8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>urlconf</td>
                    <td class="code"><pre>&#39;metpetdb_api.urls&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7f110832fb70&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;metpetdb_api.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7f1115e58080&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response_is_rendered</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/core/handlers/base.py</code> in <code>get_response</code>

          
            <div class="context" id="c139711121149896">
              
                <ol start="140" class="pre-context" id="pre139711121149896">
                
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                    response = middleware_method(request, callback, callback_args, callback_kwargs)</pre></li>
                
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                    if response:</pre></li>
                
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                        break</pre></li>
                
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>            if response is None:</pre></li>
                
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                wrapped_callback = self.make_view_atomic(callback)</pre></li>
                
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                try:</pre></li>
                
                </ol>
              
              <ol start="147" class="context-line">
                <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>
                    response = wrapped_callback(request, *callback_args, **callback_kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='148' class="post-context" id="post139711121149896">
                  
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                except Exception as e:</pre></li>
                  
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                    response = self.process_exception_by_middleware(e, request)</pre></li>
                  
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>            # Complain if the view returned None (a common error).</pre></li>
                  
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>            if response is None:</pre></li>
                  
                  <li onclick="toggle('pre139711121149896', 'post139711121149896')"><pre>                if isinstance(callback, types.FunctionType):    # FBV</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121149896')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121149896">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>response</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver_match</td>
                    <td class="code"><pre>ResolverMatch(func=api.samples.v1.views.SampleViewSet, args=(), kwargs={}, url_name=sample-list, app_names=[], namespaces=[])</pre></td>
                  </tr>
                
                  <tr>
                    <td>wrapped_callback</td>
                    <td class="code"><pre>&lt;function SampleViewSet at 0x7f1108196ae8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback_args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/api/samples/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>callback</td>
                    <td class="code"><pre>&lt;function SampleViewSet at 0x7f1108196ae8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>urlconf</td>
                    <td class="code"><pre>&#39;metpetdb_api.urls&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>middleware_method</td>
                    <td class="code"><pre>&lt;bound method CsrfViewMiddleware.process_view of &lt;django.middleware.csrf.CsrfViewMiddleware object at 0x7f110832fb70&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>resolver</td>
                    <td class="code"><pre>&lt;RegexURLResolver &#39;metpetdb_api.urls&#39; (None:None) ^/&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.core.handlers.wsgi.WSGIHandler object at 0x7f1115e58080&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>response_is_rendered</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/views/decorators/csrf.py</code> in <code>wrapped_view</code>

          
            <div class="context" id="c139711121463240">
              
                <ol start="51" class="pre-context" id="pre139711121463240">
                
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    Marks a view function as being exempt from the CSRF view protection.</pre></li>
                
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    # We could just do view_func.csrf_exempt = True, but decorators</pre></li>
                
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    # are nicer if they don&#39;t have side-effects, so we return a new</pre></li>
                
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    # function.</pre></li>
                
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    def wrapped_view(*args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="58" class="context-line">
                <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>
        return view_func(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='59' class="post-context" id="post139711121463240">
                  
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    wrapped_view.csrf_exempt = True</pre></li>
                  
                  <li onclick="toggle('pre139711121463240', 'post139711121463240')"><pre>    return wraps(view_func, assigned=available_attrs(view_func))(wrapped_view)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121463240')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121463240">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;WSGIRequest: POST &#39;/api/samples/&#39;&gt;,)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>view_func</td>
                    <td class="code"><pre>&lt;function SampleViewSet at 0x7f1108196a60&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/viewsets.py</code> in <code>view</code>

          
            <div class="context" id="c139711121462472">
              
                <ol start="80" class="pre-context" id="pre139711121462472">
                
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>                setattr(self, method, handler)</pre></li>
                
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>            # Patch this in as it&#39;s otherwise only present from 1.5 onwards</pre></li>
                
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>            if hasattr(self, &#39;get&#39;) and not hasattr(self, &#39;head&#39;):</pre></li>
                
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>                self.head = self.get</pre></li>
                
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>            # And continue as usual</pre></li>
                
                </ol>
              
              <ol start="87" class="context-line">
                <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>
            return self.dispatch(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='88' class="post-context" id="post139711121462472">
                  
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>        # take name and docstring from class</pre></li>
                  
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>        update_wrapper(view, cls, updated=())</pre></li>
                  
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>        # and possible attributes set by decorators</pre></li>
                  
                  <li onclick="toggle('pre139711121462472', 'post139711121462472')"><pre>        # like csrf_exempt from dispatch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121462472')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121462472">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>method</td>
                    <td class="code"><pre>&#39;get&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;WSGIRequest: POST &#39;/api/samples/&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method SampleViewSet.list of &lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>actions</td>
                    <td class="code"><pre>{&#39;get&#39;: &#39;list&#39;, &#39;post&#39;: &#39;create&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;api.samples.v1.views.SampleViewSet&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>action</td>
                    <td class="code"><pre>&#39;list&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>initkwargs</td>
                    <td class="code"><pre>{&#39;suffix&#39;: &#39;List&#39;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c139711123874952">
              
                <ol start="459" class="pre-context" id="pre139711123874952">
                
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>            response = handler(request, *args, **kwargs)</pre></li>
                
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>        except Exception as exc:</pre></li>
                
                </ol>
              
              <ol start="466" class="context-line">
                <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>
            response = self.handle_exception(exc)</pre> <span>...</span></li></ol>
              
                <ol start='467' class="post-context" id="post139711123874952">
                  
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>        return self.response</pre></li>
                  
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>    def options(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre139711123874952', 'post139711123874952')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711123874952')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711123874952">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method SampleViewSet.create of &lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f1107b2b278&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/views.py</code> in <code>dispatch</code>

          
            <div class="context" id="c139711123874504">
              
                <ol start="456" class="pre-context" id="pre139711123874504">
                
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>            # Get the appropriate handler method</pre></li>
                
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>            if request.method.lower() in self.http_method_names:</pre></li>
                
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>                handler = getattr(self, request.method.lower(),</pre></li>
                
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>                                  self.http_method_not_allowed)</pre></li>
                
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>            else:</pre></li>
                
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>                handler = self.http_method_not_allowed</pre></li>
                
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre></pre></li>
                
                </ol>
              
              <ol start="463" class="context-line">
                <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>
            response = handler(request, *args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='464' class="post-context" id="post139711123874504">
                  
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>        except Exception as exc:</pre></li>
                  
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>            response = self.handle_exception(exc)</pre></li>
                  
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>        self.response = self.finalize_response(request, response, *args, **kwargs)</pre></li>
                  
                  <li onclick="toggle('pre139711123874504', 'post139711123874504')"><pre>        return self.response</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711123874504')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711123874504">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>handler</td>
                    <td class="code"><pre>&lt;bound method SampleViewSet.create of &lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f1107b2b278&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/api/metpetdb_api/api/samples/v1/views.py</code> in <code>create</code>

          
            <div class="context" id="c139711123874056">
              
                <ol start="149" class="pre-context" id="pre139711123874056">
                
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>    def perform_create(self, serializer):</pre></li>
                
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>        return serializer.save()</pre></li>
                
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                
                </ol>
              
              <ol start="156" class="context-line">
                <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>
        instance = self.perform_create(serializer)</pre> <span>...</span></li></ol>
              
                <ol start='157' class="post-context" id="post139711123874056">
                  
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>        metamorphic_region_ids = request.data.get(&#39;metamorphic_region_ids&#39;)</pre></li>
                  
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>        metamorphic_grade_ids = request.data.get(&#39;metamorphic_grade_ids&#39;)</pre></li>
                  
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>        minerals = request.data.get(&#39;minerals&#39;)</pre></li>
                  
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre>        references = request.data.get(&#39;references&#39;)</pre></li>
                  
                  <li onclick="toggle('pre139711123874056', 'post139711123874056')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711123874056')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711123874056">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>SampleSerializer(context={&#39;view&#39;: &lt;api.samples.v1.views.SampleViewSet object&gt;, &#39;format&#39;: None, &#39;request&#39;: &lt;rest_framework.request.Request object&gt;}, data={&#39;location_name&#39;: &#39;,comma,test,&#39;, &#39;comment&#39;: [&#39;0&#39;], &#39;number&#39;: &#39;6&#39;, &#39;reference&#39;: &#39;3&#39;, &#39;metamorpic_grade_id&#39;: &#39;ok&#39;, &#39;collector_id&#39;: &#39;8&#39;, &#39;region&#39;: &#39;3&#39;, &#39;collecor_name&#39;: &#39;7&#39;, &#39;country&#39;: &#39;4&#39;, &#39;alias&#39;: &#39;2&#39;, &#39;description&#39;: &#39;4&#39;, &#39;minerals&#39;: [{&#39;ok&#39;: &#39;hi&#39;}, {&#39;fish&#39;: &#39;what&#39;}], &#39;mineral2&#39;: &#39;7&#39;, &#39;owner&#39;: &#39;cf8d32d0-e604-4028-9724-ad45eb594a8f&#39;, &#39;location_coords&#39;: &#39;5&#39;, &#39;collection_date&#39;: &#39;2016-05-13T23:15&#39;, &#39;mineral3&#39;: &#39;8&#39;, &#39;rock_type_id&#39;: &#39;&#39;, &#39;location_error&#39;: &#39;6&#39;}):
    id = UUIDField(read_only=True)
    minerals = SampleMineralSerializer(many=True, source=&#39;samplemineral_set&#39;):
        id = ReadOnlyField(source=&#39;mineral.id&#39;)
        name = ReadOnlyField(source=&#39;mineral.name&#39;)
        amount = CharField(allow_blank=True, allow_null=True, max_length=30, required=False)
        real_mineral_id = ReadOnlyField(source=&#39;mineral.real_mineral_id&#39;)
    owner = UserSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidator(queryset=User.objects.all())&gt;])
        address = CharField(allow_blank=True, allow_null=True, max_length=200, required=False)
        city = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
        province = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        postal_code = CharField(allow_blank=True, allow_null=True, max_length=15, required=False)
        institution = CharField(allow_blank=True, allow_null=True, max_length=300, required=False)
        professional_url = CharField(allow_blank=True, allow_null=True, max_length=255, required=False)
        research_interests = CharField(allow_blank=True, allow_null=True, max_length=1024, required=False)
    subsample_ids = SerializerMethodField()
    chemical_analyses_ids = SerializerMethodField()
    version = ModelField(help_text=&#39;record revision number&#39;, model_field=&lt;concurrency.fields.AutoIncVersionField: version&gt;, required=False)
    public_data = BooleanField(required=False)
    number = CharField(max_length=35)
    aliases = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Aliases&#39;, max_length=35, required=False), required=False)
    collection_date = DateTimeField(allow_null=True, required=False)
    description = CharField(allow_blank=True, allow_null=True, required=False, style={&#39;base_template&#39;: &#39;textarea.html&#39;})
    location_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    location_coords = ModelField(model_field=&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;)
    location_error = FloatField(allow_null=True, required=False)
    date_precision = IntegerField(allow_null=True, max_value=32767, min_value=-32768, required=False)
    country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
    regions = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Regions&#39;, max_length=100, required=False), required=False)
    collector_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    sesar_number = CharField(allow_blank=True, allow_null=True, max_length=9, required=False)
    rock_type = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100, validators=[&lt;UniqueValidator(queryset=RockType.objects.all())&gt;])
    collector_id = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        password = CharField(max_length=128)
        last_login = DateTimeField(allow_null=True, required=False)
        is_superuser = BooleanField(help_text=&#39;Designates that this user has all permissions without explicitly assigning them.&#39;, label=&#39;Superuser status&#39;, required=False)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidat... &lt;trimmed 7620 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>request</td>
                    <td class="code"><pre>&lt;rest_framework.request.Request object at 0x7f1107b2b278&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/api/metpetdb_api/api/samples/v1/views.py</code> in <code>perform_create</code>

          
            <div class="context" id="c139711121485576">
              
                <ol start="143" class="pre-context" id="pre139711121485576">
                
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>        # associations that aren&#39;t needed anymore and create new</pre></li>
                
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>        # associations, if required.</pre></li>
                
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>        instance.references.clear()</pre></li>
                
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>        instance.references.add(*to_add)</pre></li>
                
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>    def perform_create(self, serializer):</pre></li>
                
                </ol>
              
              <ol start="150" class="context-line">
                <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>
        return serializer.save()</pre> <span>...</span></li></ol>
              
                <ol start='151' class="post-context" id="post139711121485576">
                  
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>    def create(self, request, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>        serializer = self.get_serializer(data=request.data)</pre></li>
                  
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>        serializer.is_valid(raise_exception=True)</pre></li>
                  
                  <li onclick="toggle('pre139711121485576', 'post139711121485576')"><pre>        instance = self.perform_create(serializer)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121485576')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121485576">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>serializer</td>
                    <td class="code"><pre>SampleSerializer(context={&#39;view&#39;: &lt;api.samples.v1.views.SampleViewSet object&gt;, &#39;format&#39;: None, &#39;request&#39;: &lt;rest_framework.request.Request object&gt;}, data={&#39;location_name&#39;: &#39;,comma,test,&#39;, &#39;comment&#39;: [&#39;0&#39;], &#39;number&#39;: &#39;6&#39;, &#39;reference&#39;: &#39;3&#39;, &#39;metamorpic_grade_id&#39;: &#39;ok&#39;, &#39;collector_id&#39;: &#39;8&#39;, &#39;region&#39;: &#39;3&#39;, &#39;collecor_name&#39;: &#39;7&#39;, &#39;country&#39;: &#39;4&#39;, &#39;alias&#39;: &#39;2&#39;, &#39;description&#39;: &#39;4&#39;, &#39;minerals&#39;: [{&#39;ok&#39;: &#39;hi&#39;}, {&#39;fish&#39;: &#39;what&#39;}], &#39;mineral2&#39;: &#39;7&#39;, &#39;owner&#39;: &#39;cf8d32d0-e604-4028-9724-ad45eb594a8f&#39;, &#39;location_coords&#39;: &#39;5&#39;, &#39;collection_date&#39;: &#39;2016-05-13T23:15&#39;, &#39;mineral3&#39;: &#39;8&#39;, &#39;rock_type_id&#39;: &#39;&#39;, &#39;location_error&#39;: &#39;6&#39;}):
    id = UUIDField(read_only=True)
    minerals = SampleMineralSerializer(many=True, source=&#39;samplemineral_set&#39;):
        id = ReadOnlyField(source=&#39;mineral.id&#39;)
        name = ReadOnlyField(source=&#39;mineral.name&#39;)
        amount = CharField(allow_blank=True, allow_null=True, max_length=30, required=False)
        real_mineral_id = ReadOnlyField(source=&#39;mineral.real_mineral_id&#39;)
    owner = UserSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidator(queryset=User.objects.all())&gt;])
        address = CharField(allow_blank=True, allow_null=True, max_length=200, required=False)
        city = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
        province = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        postal_code = CharField(allow_blank=True, allow_null=True, max_length=15, required=False)
        institution = CharField(allow_blank=True, allow_null=True, max_length=300, required=False)
        professional_url = CharField(allow_blank=True, allow_null=True, max_length=255, required=False)
        research_interests = CharField(allow_blank=True, allow_null=True, max_length=1024, required=False)
    subsample_ids = SerializerMethodField()
    chemical_analyses_ids = SerializerMethodField()
    version = ModelField(help_text=&#39;record revision number&#39;, model_field=&lt;concurrency.fields.AutoIncVersionField: version&gt;, required=False)
    public_data = BooleanField(required=False)
    number = CharField(max_length=35)
    aliases = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Aliases&#39;, max_length=35, required=False), required=False)
    collection_date = DateTimeField(allow_null=True, required=False)
    description = CharField(allow_blank=True, allow_null=True, required=False, style={&#39;base_template&#39;: &#39;textarea.html&#39;})
    location_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    location_coords = ModelField(model_field=&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;)
    location_error = FloatField(allow_null=True, required=False)
    date_precision = IntegerField(allow_null=True, max_value=32767, min_value=-32768, required=False)
    country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
    regions = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Regions&#39;, max_length=100, required=False), required=False)
    collector_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    sesar_number = CharField(allow_blank=True, allow_null=True, max_length=9, required=False)
    rock_type = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100, validators=[&lt;UniqueValidator(queryset=RockType.objects.all())&gt;])
    collector_id = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        password = CharField(max_length=128)
        last_login = DateTimeField(allow_null=True, required=False)
        is_superuser = BooleanField(help_text=&#39;Designates that this user has all permissions without explicitly assigning them.&#39;, label=&#39;Superuser status&#39;, required=False)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidat... &lt;trimmed 7620 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;api.samples.v1.views.SampleViewSet object at 0x7f1107b6bb00&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/serializers.py</code> in <code>save</code>

          
            <div class="context" id="c139711121485640">
              
                <ol start="184" class="pre-context" id="pre139711121485640">
                
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>        if self.instance is not None:</pre></li>
                
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>            self.instance = self.update(self.instance, validated_data)</pre></li>
                
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>            assert self.instance is not None, (</pre></li>
                
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>                &#39;`update()` did not return an object instance.&#39;</pre></li>
                
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>            )</pre></li>
                
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>        else:</pre></li>
                
                </ol>
              
              <ol start="191" class="context-line">
                <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>
            self.instance = self.create(validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='192' class="post-context" id="post139711121485640">
                  
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>            assert self.instance is not None, (</pre></li>
                  
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>                &#39;`create()` did not return an object instance.&#39;</pre></li>
                  
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>            )</pre></li>
                  
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre>        return self.instance</pre></li>
                  
                  <li onclick="toggle('pre139711121485640', 'post139711121485640')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121485640')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121485640">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>SampleSerializer(context={&#39;view&#39;: &lt;api.samples.v1.views.SampleViewSet object&gt;, &#39;format&#39;: None, &#39;request&#39;: &lt;rest_framework.request.Request object&gt;}, data={&#39;location_name&#39;: &#39;,comma,test,&#39;, &#39;comment&#39;: [&#39;0&#39;], &#39;number&#39;: &#39;6&#39;, &#39;reference&#39;: &#39;3&#39;, &#39;metamorpic_grade_id&#39;: &#39;ok&#39;, &#39;collector_id&#39;: &#39;8&#39;, &#39;region&#39;: &#39;3&#39;, &#39;collecor_name&#39;: &#39;7&#39;, &#39;country&#39;: &#39;4&#39;, &#39;alias&#39;: &#39;2&#39;, &#39;description&#39;: &#39;4&#39;, &#39;minerals&#39;: [{&#39;ok&#39;: &#39;hi&#39;}, {&#39;fish&#39;: &#39;what&#39;}], &#39;mineral2&#39;: &#39;7&#39;, &#39;owner&#39;: &#39;cf8d32d0-e604-4028-9724-ad45eb594a8f&#39;, &#39;location_coords&#39;: &#39;5&#39;, &#39;collection_date&#39;: &#39;2016-05-13T23:15&#39;, &#39;mineral3&#39;: &#39;8&#39;, &#39;rock_type_id&#39;: &#39;&#39;, &#39;location_error&#39;: &#39;6&#39;}):
    id = UUIDField(read_only=True)
    minerals = SampleMineralSerializer(many=True, source=&#39;samplemineral_set&#39;):
        id = ReadOnlyField(source=&#39;mineral.id&#39;)
        name = ReadOnlyField(source=&#39;mineral.name&#39;)
        amount = CharField(allow_blank=True, allow_null=True, max_length=30, required=False)
        real_mineral_id = ReadOnlyField(source=&#39;mineral.real_mineral_id&#39;)
    owner = UserSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidator(queryset=User.objects.all())&gt;])
        address = CharField(allow_blank=True, allow_null=True, max_length=200, required=False)
        city = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
        province = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        postal_code = CharField(allow_blank=True, allow_null=True, max_length=15, required=False)
        institution = CharField(allow_blank=True, allow_null=True, max_length=300, required=False)
        professional_url = CharField(allow_blank=True, allow_null=True, max_length=255, required=False)
        research_interests = CharField(allow_blank=True, allow_null=True, max_length=1024, required=False)
    subsample_ids = SerializerMethodField()
    chemical_analyses_ids = SerializerMethodField()
    version = ModelField(help_text=&#39;record revision number&#39;, model_field=&lt;concurrency.fields.AutoIncVersionField: version&gt;, required=False)
    public_data = BooleanField(required=False)
    number = CharField(max_length=35)
    aliases = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Aliases&#39;, max_length=35, required=False), required=False)
    collection_date = DateTimeField(allow_null=True, required=False)
    description = CharField(allow_blank=True, allow_null=True, required=False, style={&#39;base_template&#39;: &#39;textarea.html&#39;})
    location_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    location_coords = ModelField(model_field=&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;)
    location_error = FloatField(allow_null=True, required=False)
    date_precision = IntegerField(allow_null=True, max_value=32767, min_value=-32768, required=False)
    country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
    regions = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Regions&#39;, max_length=100, required=False), required=False)
    collector_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    sesar_number = CharField(allow_blank=True, allow_null=True, max_length=9, required=False)
    rock_type = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100, validators=[&lt;UniqueValidator(queryset=RockType.objects.all())&gt;])
    collector_id = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        password = CharField(max_length=128)
        last_login = DateTimeField(allow_null=True, required=False)
        is_superuser = BooleanField(help_text=&#39;Designates that this user has all permissions without explicitly assigning them.&#39;, label=&#39;Superuser status&#39;, required=False)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidat... &lt;trimmed 7620 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#39;collection_date&#39;: datetime.datetime(2016, 5, 13, 23, 15, tzinfo=&lt;django.utils.timezone.LocalTimezone object at 0x7f1107bdc828&gt;),
 &#39;country&#39;: &#39;4&#39;,
 &#39;description&#39;: &#39;4&#39;,
 &#39;location_coords&#39;: &#39;5&#39;,
 &#39;location_error&#39;: 6.0,
 &#39;location_name&#39;: &#39;,comma,test,&#39;,
 &#39;number&#39;: &#39;6&#39;,
 &#39;owner&#39;: &lt;User: drumhb@rpi.edu&gt;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/api/metpetdb_api/api/samples/v1/serializers.py</code> in <code>create</code>

          
            <div class="context" id="c139711121485192">
              
                <ol start="75" class="pre-context" id="pre139711121485192">
                
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>        return not bool(self._errors)</pre></li>
                
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>    def create(self, validated_data):</pre></li>
                
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>        if validated_data.get(&#39;samplemineral_set&#39;):</pre></li>
                
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>            del validated_data[&#39;samplemineral_set&#39;]</pre></li>
                
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre></pre></li>
                
                </ol>
              
              <ol start="82" class="context-line">
                <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>
        instance = super().create(validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='83' class="post-context" id="post139711121485192">
                  
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>        return instance</pre></li>
                  
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>    def update(self, instance, validated_data):</pre></li>
                  
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>        for attr, value in validated_data.items():</pre></li>
                  
                  <li onclick="toggle('pre139711121485192', 'post139711121485192')"><pre>            if attr in SAMPLE_FIELDS:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121485192')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121485192">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>SampleSerializer(context={&#39;view&#39;: &lt;api.samples.v1.views.SampleViewSet object&gt;, &#39;format&#39;: None, &#39;request&#39;: &lt;rest_framework.request.Request object&gt;}, data={&#39;location_name&#39;: &#39;,comma,test,&#39;, &#39;comment&#39;: [&#39;0&#39;], &#39;number&#39;: &#39;6&#39;, &#39;reference&#39;: &#39;3&#39;, &#39;metamorpic_grade_id&#39;: &#39;ok&#39;, &#39;collector_id&#39;: &#39;8&#39;, &#39;region&#39;: &#39;3&#39;, &#39;collecor_name&#39;: &#39;7&#39;, &#39;country&#39;: &#39;4&#39;, &#39;alias&#39;: &#39;2&#39;, &#39;description&#39;: &#39;4&#39;, &#39;minerals&#39;: [{&#39;ok&#39;: &#39;hi&#39;}, {&#39;fish&#39;: &#39;what&#39;}], &#39;mineral2&#39;: &#39;7&#39;, &#39;owner&#39;: &#39;cf8d32d0-e604-4028-9724-ad45eb594a8f&#39;, &#39;location_coords&#39;: &#39;5&#39;, &#39;collection_date&#39;: &#39;2016-05-13T23:15&#39;, &#39;mineral3&#39;: &#39;8&#39;, &#39;rock_type_id&#39;: &#39;&#39;, &#39;location_error&#39;: &#39;6&#39;}):
    id = UUIDField(read_only=True)
    minerals = SampleMineralSerializer(many=True, source=&#39;samplemineral_set&#39;):
        id = ReadOnlyField(source=&#39;mineral.id&#39;)
        name = ReadOnlyField(source=&#39;mineral.name&#39;)
        amount = CharField(allow_blank=True, allow_null=True, max_length=30, required=False)
        real_mineral_id = ReadOnlyField(source=&#39;mineral.real_mineral_id&#39;)
    owner = UserSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidator(queryset=User.objects.all())&gt;])
        address = CharField(allow_blank=True, allow_null=True, max_length=200, required=False)
        city = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
        province = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        postal_code = CharField(allow_blank=True, allow_null=True, max_length=15, required=False)
        institution = CharField(allow_blank=True, allow_null=True, max_length=300, required=False)
        professional_url = CharField(allow_blank=True, allow_null=True, max_length=255, required=False)
        research_interests = CharField(allow_blank=True, allow_null=True, max_length=1024, required=False)
    subsample_ids = SerializerMethodField()
    chemical_analyses_ids = SerializerMethodField()
    version = ModelField(help_text=&#39;record revision number&#39;, model_field=&lt;concurrency.fields.AutoIncVersionField: version&gt;, required=False)
    public_data = BooleanField(required=False)
    number = CharField(max_length=35)
    aliases = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Aliases&#39;, max_length=35, required=False), required=False)
    collection_date = DateTimeField(allow_null=True, required=False)
    description = CharField(allow_blank=True, allow_null=True, required=False, style={&#39;base_template&#39;: &#39;textarea.html&#39;})
    location_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    location_coords = ModelField(model_field=&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;)
    location_error = FloatField(allow_null=True, required=False)
    date_precision = IntegerField(allow_null=True, max_value=32767, min_value=-32768, required=False)
    country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
    regions = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Regions&#39;, max_length=100, required=False), required=False)
    collector_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    sesar_number = CharField(allow_blank=True, allow_null=True, max_length=9, required=False)
    rock_type = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100, validators=[&lt;UniqueValidator(queryset=RockType.objects.all())&gt;])
    collector_id = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        password = CharField(max_length=128)
        last_login = DateTimeField(allow_null=True, required=False)
        is_superuser = BooleanField(help_text=&#39;Designates that this user has all permissions without explicitly assigning them.&#39;, label=&#39;Superuser status&#39;, required=False)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidat... &lt;trimmed 7620 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#39;collection_date&#39;: datetime.datetime(2016, 5, 13, 23, 15, tzinfo=&lt;django.utils.timezone.LocalTimezone object at 0x7f1107bdc828&gt;),
 &#39;country&#39;: &#39;4&#39;,
 &#39;description&#39;: &#39;4&#39;,
 &#39;location_coords&#39;: &#39;5&#39;,
 &#39;location_error&#39;: 6.0,
 &#39;location_name&#39;: &#39;,comma,test,&#39;,
 &#39;number&#39;: &#39;6&#39;,
 &#39;owner&#39;: &lt;User: drumhb@rpi.edu&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>__class__</td>
                    <td class="code"><pre>&lt;class &#39;api.samples.v1.serializers.SampleSerializer&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame user">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/serializers.py</code> in <code>create</code>

          
            <div class="context" id="c139711121485128">
              
                <ol start="839" class="pre-context" id="pre139711121485128">
                
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>        info = model_meta.get_field_info(ModelClass)</pre></li>
                
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>        many_to_many = {}</pre></li>
                
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>        for field_name, relation_info in info.relations.items():</pre></li>
                
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>            if relation_info.to_many and (field_name in validated_data):</pre></li>
                
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>                many_to_many[field_name] = validated_data.pop(field_name)</pre></li>
                
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>        try:</pre></li>
                
                </ol>
              
              <ol start="846" class="context-line">
                <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>
            instance = ModelClass.objects.create(**validated_data)</pre> <span>...</span></li></ol>
              
                <ol start='847' class="post-context" id="post139711121485128">
                  
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>        except TypeError as exc:</pre></li>
                  
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>            msg = (</pre></li>
                  
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>                &#39;Got a `TypeError` when calling `%s.objects.create()`. &#39;</pre></li>
                  
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>                &#39;This may be because you have a writable field on the &#39;</pre></li>
                  
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>                &#39;serializer class that is not a valid argument to &#39;</pre></li>
                  
                  <li onclick="toggle('pre139711121485128', 'post139711121485128')"><pre>                &#39;`%s.objects.create()`. You may need to make the field &#39;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121485128')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121485128">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>relation_info</td>
                    <td class="code"><pre>RelationInfo(model_field=None, related_model=&lt;class &#39;apps.samples.models.SampleMineral&#39;&gt;, to_many=True, to_field=&#39;id&#39;, has_through_model=False)</pre></td>
                  </tr>
                
                  <tr>
                    <td>many_to_many</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>ModelClass</td>
                    <td class="code"><pre>&lt;class &#39;apps.samples.models.Sample&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>info</td>
                    <td class="code"><pre>FieldResult(pk=&lt;django.db.models.fields.UUIDField: id&gt;, fields=OrderedDict([(&#39;version&#39;, &lt;concurrency.fields.AutoIncVersionField: version&gt;), (&#39;public_data&#39;, &lt;django.db.models.fields.BooleanField: public_data&gt;), (&#39;number&#39;, &lt;django.db.models.fields.CharField: number&gt;), (&#39;aliases&#39;, &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;), (&#39;collection_date&#39;, &lt;django.db.models.fields.DateTimeField: collection_date&gt;), (&#39;description&#39;, &lt;django.db.models.fields.TextField: description&gt;), (&#39;location_name&#39;, &lt;django.db.models.fields.CharField: location_name&gt;), (&#39;location_coords&#39;, &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;), (&#39;location_error&#39;, &lt;django.db.models.fields.FloatField: location_error&gt;), (&#39;date_precision&#39;, &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;), (&#39;country&#39;, &lt;django.db.models.fields.CharField: country&gt;), (&#39;regions&#39;, &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;), (&#39;collector_name&#39;, &lt;django.db.models.fields.CharField: collector_name&gt;), (&#39;sesar_number&#39;, &lt;django.db.models.fields.CharField: sesar_number&gt;)]), forward_relations=OrderedDict([(&#39;owner&#39;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: owner&gt;, related_model=&lt;class &#39;apps.users.models.User&#39;&gt;, to_many=False, to_field=None, has_through_model=False)), (&#39;rock_type&#39;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: rock_type&gt;, related_model=&lt;class &#39;apps.samples.models.RockType&#39;&gt;, to_many=False, to_field=&#39;id&#39;, has_through_model=False)), (&#39;collector_id&#39;, RelationInfo(model_field=&lt;django.db.models.fields.related.ForeignKey: collector_id&gt;, related_model=&lt;class &#39;apps.users.models.User&#39;&gt;, to_many=False, to_field=None, has_through_model=False)), (&#39;metamorphic_regions&#39;, RelationInfo(model_field=&lt;django.db.models.fields.related.ManyToManyField: metamorphic_regions&gt;, related_model=&lt;class &#39;apps.samples.models.MetamorphicRegion&#39;&gt;, to_many=True, to_field=None, has_through_model=False)), (&#39;metamorphic_grades&#39;, RelationInfo(model_field=&lt;django.db.models.fields.related.ManyToManyField: metamorphic_grades&gt;, related_model=&lt;class &#39;apps.samples.models.MetamorphicGrade&#39;&gt;, to_many=True, to_field=None, has_through_model=False)), (&#39;minerals&#39;, RelationInfo(model_field=&lt;django.db.models.fields.related.ManyToManyField: minerals&gt;, related_model=&lt;class &#39;apps.samples.models.Mineral&#39;&gt;, to_many=True, to_field=None, has_through_model=True)), (&#39;references&#39;, RelationInfo(model_field=&lt;django.db.models.fields.related.ManyToManyField: references&gt;, related_model=&lt;class &#39;apps.samples.models.GeoReference&#39;&gt;, to_many=True, to_field=None, has_through_model=False))]), reverse_relations=OrderedDict([(&#39;subsamples&#39;, RelationInfo(model_field=None, related_model=&lt;class &#39;apps.samples.models.Subsample&#39;&gt;, to_many=True, to_field=&#39;id&#39;, has_through_model=False)), (&#39;samplemineral_set&#39;, RelationInfo(model_field=None, related_model=&lt;class &#39;apps.samples.models.SampleMineral&#39;&gt;, to_many=True, to_field=&#39;id&#39;, has_through_model=False))]), fields_and_pk=OrderedDict([(&#39;pk&#39;, &lt;django.db.models.fields.UUIDField: id&gt;), (&#39;id&#39;, &lt;django.db.models.fields.UUIDField: id&gt;), (&#39;version&#39;, &lt;concurrency.fields.AutoIncVersionField: version&gt;), (&#39;public_data&#39;, &lt;django.db.models.fields.BooleanField: public_data&gt;), (&#39;number&#39;, &lt;django.db.models.fields.CharField: number&gt;), (&#39;aliases&#39;, &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;), (&#39;collection_date&#39;, &lt;django.db.models.fields.DateTimeField: collection_date&gt;), (&#39;description&#39;, &lt;django.db.models.fields.TextField: description&gt;), (&#39;location_name&#39;, &lt;django.db.models.fields.CharField: location_name&gt;), (&#39;location_coords&#39;, &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;), (&#39;location_error&#39;, &lt;django.db.models.fields.FloatField: location_error&gt;), (&#39;date_precision&#39;, &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;), (&#39;country&#39;, &lt;django.db.models.fields.CharField: country&gt;), (&#39;regions&#39;, &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;), (&#39;collector_name&#39;, &lt;django.db.models.fields.CharField: collector_name&gt;), (&#39;sesar_number&#39;, &lt;django.db.models.fields.CharField: sesar_number&gt;)... &lt;trimmed 5957 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>SampleSerializer(context={&#39;view&#39;: &lt;api.samples.v1.views.SampleViewSet object&gt;, &#39;format&#39;: None, &#39;request&#39;: &lt;rest_framework.request.Request object&gt;}, data={&#39;location_name&#39;: &#39;,comma,test,&#39;, &#39;comment&#39;: [&#39;0&#39;], &#39;number&#39;: &#39;6&#39;, &#39;reference&#39;: &#39;3&#39;, &#39;metamorpic_grade_id&#39;: &#39;ok&#39;, &#39;collector_id&#39;: &#39;8&#39;, &#39;region&#39;: &#39;3&#39;, &#39;collecor_name&#39;: &#39;7&#39;, &#39;country&#39;: &#39;4&#39;, &#39;alias&#39;: &#39;2&#39;, &#39;description&#39;: &#39;4&#39;, &#39;minerals&#39;: [{&#39;ok&#39;: &#39;hi&#39;}, {&#39;fish&#39;: &#39;what&#39;}], &#39;mineral2&#39;: &#39;7&#39;, &#39;owner&#39;: &#39;cf8d32d0-e604-4028-9724-ad45eb594a8f&#39;, &#39;location_coords&#39;: &#39;5&#39;, &#39;collection_date&#39;: &#39;2016-05-13T23:15&#39;, &#39;mineral3&#39;: &#39;8&#39;, &#39;rock_type_id&#39;: &#39;&#39;, &#39;location_error&#39;: &#39;6&#39;}):
    id = UUIDField(read_only=True)
    minerals = SampleMineralSerializer(many=True, source=&#39;samplemineral_set&#39;):
        id = ReadOnlyField(source=&#39;mineral.id&#39;)
        name = ReadOnlyField(source=&#39;mineral.name&#39;)
        amount = CharField(allow_blank=True, allow_null=True, max_length=30, required=False)
        real_mineral_id = ReadOnlyField(source=&#39;mineral.real_mineral_id&#39;)
    owner = UserSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidator(queryset=User.objects.all())&gt;])
        address = CharField(allow_blank=True, allow_null=True, max_length=200, required=False)
        city = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
        province = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
        postal_code = CharField(allow_blank=True, allow_null=True, max_length=15, required=False)
        institution = CharField(allow_blank=True, allow_null=True, max_length=300, required=False)
        professional_url = CharField(allow_blank=True, allow_null=True, max_length=255, required=False)
        research_interests = CharField(allow_blank=True, allow_null=True, max_length=1024, required=False)
    subsample_ids = SerializerMethodField()
    chemical_analyses_ids = SerializerMethodField()
    version = ModelField(help_text=&#39;record revision number&#39;, model_field=&lt;concurrency.fields.AutoIncVersionField: version&gt;, required=False)
    public_data = BooleanField(required=False)
    number = CharField(max_length=35)
    aliases = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Aliases&#39;, max_length=35, required=False), required=False)
    collection_date = DateTimeField(allow_null=True, required=False)
    description = CharField(allow_blank=True, allow_null=True, required=False, style={&#39;base_template&#39;: &#39;textarea.html&#39;})
    location_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    location_coords = ModelField(model_field=&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;)
    location_error = FloatField(allow_null=True, required=False)
    date_precision = IntegerField(allow_null=True, max_value=32767, min_value=-32768, required=False)
    country = CharField(allow_blank=True, allow_null=True, max_length=100, required=False)
    regions = ListField(allow_null=True, child=CharField(allow_blank=True, label=&#39;Regions&#39;, max_length=100, required=False), required=False)
    collector_name = CharField(allow_blank=True, allow_null=True, max_length=50, required=False)
    sesar_number = CharField(allow_blank=True, allow_null=True, max_length=9, required=False)
    rock_type = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        name = CharField(max_length=100, validators=[&lt;UniqueValidator(queryset=RockType.objects.all())&gt;])
    collector_id = NestedSerializer(read_only=True):
        id = UUIDField(read_only=True)
        password = CharField(max_length=128)
        last_login = DateTimeField(allow_null=True, required=False)
        is_superuser = BooleanField(help_text=&#39;Designates that this user has all permissions without explicitly assigning them.&#39;, label=&#39;Superuser status&#39;, required=False)
        email = EmailField(max_length=254, validators=[&lt;UniqueValidat... &lt;trimmed 7620 bytes string&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field_name</td>
                    <td class="code"><pre>&#39;samplemineral_set&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>validated_data</td>
                    <td class="code"><pre>{&#39;collection_date&#39;: datetime.datetime(2016, 5, 13, 23, 15, tzinfo=&lt;django.utils.timezone.LocalTimezone object at 0x7f1107bdc828&gt;),
 &#39;country&#39;: &#39;4&#39;,
 &#39;description&#39;: &#39;4&#39;,
 &#39;location_coords&#39;: &#39;5&#39;,
 &#39;location_error&#39;: 6.0,
 &#39;location_name&#39;: &#39;,comma,test,&#39;,
 &#39;number&#39;: &#39;6&#39;,
 &#39;owner&#39;: &lt;User: drumhb@rpi.edu&gt;}</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c139711120698568">
              
                <ol start="115" class="pre-context" id="pre139711120698568">
                
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="122" class="context-line">
                <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='123' class="post-context" id="post139711120698568">
                  
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre139711120698568', 'post139711120698568')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120698568')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120698568">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;create&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>()</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;collection_date&#39;: datetime.datetime(2016, 5, 13, 23, 15, tzinfo=&lt;django.utils.timezone.LocalTimezone object at 0x7f1107bdc828&gt;),
 &#39;country&#39;: &#39;4&#39;,
 &#39;description&#39;: &#39;4&#39;,
 &#39;location_coords&#39;: &#39;5&#39;,
 &#39;location_error&#39;: 6.0,
 &#39;location_name&#39;: &#39;,comma,test,&#39;,
 &#39;number&#39;: &#39;6&#39;,
 &#39;owner&#39;: &lt;User: drumhb@rpi.edu&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7f1108337cf8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/query.py</code> in <code>create</code>

          
            <div class="context" id="c139711120696712">
              
                <ol start="394" class="pre-context" id="pre139711120696712">
                
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>    def create(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        Creates a new object with the given kwargs, saving it to the database</pre></li>
                
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        and returning the created object.</pre></li>
                
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        obj = self.model(**kwargs)</pre></li>
                
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        self._for_write = True</pre></li>
                
                </ol>
              
              <ol start="401" class="context-line">
                <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>
        obj.save(force_insert=True, using=self.db)</pre> <span>...</span></li></ol>
              
                <ol start='402' class="post-context" id="post139711120696712">
                  
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        return obj</pre></li>
                  
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>    def _populate_pk_values(self, objs):</pre></li>
                  
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>        for obj in objs:</pre></li>
                  
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>            if obj.pk is None:</pre></li>
                  
                  <li onclick="toggle('pre139711120696712', 'post139711120696712')"><pre>                obj.pk = obj._meta.pk.get_pk_value_on_save(obj)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120696712')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120696712">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>[&lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &#39;...(remaining elements truncated)...&#39;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;collection_date&#39;: datetime.datetime(2016, 5, 13, 23, 15, tzinfo=&lt;django.utils.timezone.LocalTimezone object at 0x7f1107bdc828&gt;),
 &#39;country&#39;: &#39;4&#39;,
 &#39;description&#39;: &#39;4&#39;,
 &#39;location_coords&#39;: &#39;5&#39;,
 &#39;location_error&#39;: 6.0,
 &#39;location_name&#39;: &#39;,comma,test,&#39;,
 &#39;number&#39;: &#39;6&#39;,
 &#39;owner&#39;: &lt;User: drumhb@rpi.edu&gt;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py</code> in <code>save</code>

          
            <div class="context" id="c139711120696328">
              
                <ol start="693" class="pre-context" id="pre139711120696328">
                
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>            ]</pre></li>
                
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>            loaded_fields = field_names.difference(deferred_fields)</pre></li>
                
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>            if loaded_fields:</pre></li>
                
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>                update_fields = frozenset(loaded_fields)</pre></li>
                
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>        self.save_base(using=using, force_insert=force_insert,</pre></li>
                
                </ol>
              
              <ol start="700" class="context-line">
                <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>
                       force_update=force_update, update_fields=update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='701' class="post-context" id="post139711120696328">
                  
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>    save.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>    def save_base(self, raw=False, force_insert=False,</pre></li>
                  
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>                  force_update=False, using=None, update_fields=None):</pre></li>
                  
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139711120696328', 'post139711120696328')"><pre>        Handles the parts of saving which should be done only once per save,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120696328')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120696328">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;User: drumhb@rpi.edu&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.db.models.fields.CharField: sesar_number&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py</code> in <code>save_base</code>

          
            <div class="context" id="c139711120695688">
              
                <ol start="721" class="pre-context" id="pre139711120695688">
                
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        meta = cls._meta</pre></li>
                
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        if not meta.auto_created:</pre></li>
                
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>            signals.pre_save.send(sender=origin, instance=self, raw=raw, using=using,</pre></li>
                
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>                                  update_fields=update_fields)</pre></li>
                
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        with transaction.atomic(using=using, savepoint=False):</pre></li>
                
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>            if not raw:</pre></li>
                
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>                self._save_parents(cls, using, update_fields)</pre></li>
                
                </ol>
              
              <ol start="728" class="context-line">
                <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>
            updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)</pre> <span>...</span></li></ol>
              
                <ol start='729' class="post-context" id="post139711120695688">
                  
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        # Store the database on which the object was saved</pre></li>
                  
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        self._state.db = using</pre></li>
                  
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        # Once saved, this is no longer a to-be-added instance.</pre></li>
                  
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        self._state.adding = False</pre></li>
                  
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120695688', 'post139711120695688')"><pre>        # Signal that the save is complete</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120695688')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120695688">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Sample&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;apps.samples.models.Sample&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>origin</td>
                    <td class="code"><pre>&lt;class &#39;apps.samples.models.Sample&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py</code> in <code>_save_table</code>

          
            <div class="context" id="c139711120697672">
              
                <ol start="805" class="pre-context" id="pre139711120697672">
                
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>                self._order = order_value</pre></li>
                
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>            fields = meta.local_concrete_fields</pre></li>
                
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>            if not pk_set:</pre></li>
                
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>                fields = [f for f in fields if not isinstance(f, AutoField)]</pre></li>
                
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>            update_pk = bool(meta.has_auto_field and not pk_set)</pre></li>
                
                </ol>
              
              <ol start="812" class="context-line">
                <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>
            result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)</pre> <span>...</span></li></ol>
              
                <ol start='813' class="post-context" id="post139711120697672">
                  
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>            if update_pk:</pre></li>
                  
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>                setattr(self, meta.pk.attname, result)</pre></li>
                  
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>        return updated</pre></li>
                  
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>    def _do_update(self, base_qs, using, pk_val, values, update_fields, forced_update):</pre></li>
                  
                  <li onclick="toggle('pre139711120697672', 'post139711120697672')"><pre>        &quot;&quot;&quot;</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120697672')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120697672">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>force_insert</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>non_pks</td>
                    <td class="code"><pre>[&lt;concurrency.fields.AutoIncVersionField: version&gt;,
 &lt;django.db.models.fields.BooleanField: public_data&gt;,
 &lt;django.db.models.fields.CharField: number&gt;,
 &lt;django.db.models.fields.related.ForeignKey: owner&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;,
 &lt;django.db.models.fields.DateTimeField: collection_date&gt;,
 &lt;django.db.models.fields.TextField: description&gt;,
 &lt;django.db.models.fields.CharField: location_name&gt;,
 &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;,
 &lt;django.db.models.fields.FloatField: location_error&gt;,
 &lt;django.db.models.fields.related.ForeignKey: rock_type&gt;,
 &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;,
 &lt;django.db.models.fields.CharField: country&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;,
 &lt;django.db.models.fields.CharField: collector_name&gt;,
 &lt;django.db.models.fields.related.ForeignKey: collector_id&gt;,
 &lt;django.db.models.fields.CharField: sesar_number&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>updated</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>cls</td>
                    <td class="code"><pre>&lt;class &#39;apps.samples.models.Sample&#39;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_set</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>force_update</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>meta</td>
                    <td class="code"><pre>&lt;Options for Sample&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>update_fields</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>(&lt;django.db.models.fields.UUIDField: id&gt;,
 &lt;concurrency.fields.AutoIncVersionField: version&gt;,
 &lt;django.db.models.fields.BooleanField: public_data&gt;,
 &lt;django.db.models.fields.CharField: number&gt;,
 &lt;django.db.models.fields.related.ForeignKey: owner&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;,
 &lt;django.db.models.fields.DateTimeField: collection_date&gt;,
 &lt;django.db.models.fields.TextField: description&gt;,
 &lt;django.db.models.fields.CharField: location_name&gt;,
 &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;,
 &lt;django.db.models.fields.FloatField: location_error&gt;,
 &lt;django.db.models.fields.related.ForeignKey: rock_type&gt;,
 &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;,
 &lt;django.db.models.fields.CharField: country&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;,
 &lt;django.db.models.fields.CharField: collector_name&gt;,
 &lt;django.db.models.fields.related.ForeignKey: collector_id&gt;,
 &lt;django.db.models.fields.CharField: sesar_number&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>pk_val</td>
                    <td class="code"><pre>UUID(&#39;e7cd5e92-6fa3-4fae-8a9f-7511071cfc6a&#39;)</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py</code> in <code>_do_insert</code>

          
            <div class="context" id="c139711119070792">
              
                <ol start="844" class="pre-context" id="pre139711119070792">
                
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>    def _do_insert(self, manager, using, fields, update_pk, raw):</pre></li>
                
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>        Do an INSERT. If update_pk is defined then this method should return</pre></li>
                
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>        the new pk for the model.</pre></li>
                
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>        return manager._insert([self], fields=fields, return_id=update_pk,</pre></li>
                
                </ol>
              
              <ol start="851" class="context-line">
                <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>
                               using=using, raw=raw)</pre> <span>...</span></li></ol>
              
                <ol start='852' class="post-context" id="post139711119070792">
                  
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>    def delete(self, using=None, keep_parents=False):</pre></li>
                  
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>        using = using or router.db_for_write(self.__class__, instance=self)</pre></li>
                  
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>        assert self._get_pk_val() is not None, (</pre></li>
                  
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>            &quot;%s object can&#39;t be deleted because its %s attribute is set to None.&quot; %</pre></li>
                  
                  <li onclick="toggle('pre139711119070792', 'post139711119070792')"><pre>            (self._meta.object_name, self._meta.pk.attname)</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119070792')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119070792">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>update_pk</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>manager</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7f1108337cf8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>(&lt;django.db.models.fields.UUIDField: id&gt;,
 &lt;concurrency.fields.AutoIncVersionField: version&gt;,
 &lt;django.db.models.fields.BooleanField: public_data&gt;,
 &lt;django.db.models.fields.CharField: number&gt;,
 &lt;django.db.models.fields.related.ForeignKey: owner&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;,
 &lt;django.db.models.fields.DateTimeField: collection_date&gt;,
 &lt;django.db.models.fields.TextField: description&gt;,
 &lt;django.db.models.fields.CharField: location_name&gt;,
 &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;,
 &lt;django.db.models.fields.FloatField: location_error&gt;,
 &lt;django.db.models.fields.related.ForeignKey: rock_type&gt;,
 &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;,
 &lt;django.db.models.fields.CharField: country&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;,
 &lt;django.db.models.fields.CharField: collector_name&gt;,
 &lt;django.db.models.fields.related.ForeignKey: collector_id&gt;,
 &lt;django.db.models.fields.CharField: sesar_number&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/manager.py</code> in <code>manager_method</code>

          
            <div class="context" id="c139711119071048">
              
                <ol start="115" class="pre-context" id="pre139711119071048">
                
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>    def check(self, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>        return []</pre></li>
                
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>    @classmethod</pre></li>
                
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>    def _get_queryset_methods(cls, queryset_class):</pre></li>
                
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>        def create_method(name, method):</pre></li>
                
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>            def manager_method(self, *args, **kwargs):</pre></li>
                
                </ol>
              
              <ol start="122" class="context-line">
                <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>
                return getattr(self.get_queryset(), name)(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='123' class="post-context" id="post139711119071048">
                  
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>            manager_method.__name__ = method.__name__</pre></li>
                  
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>            manager_method.__doc__ = method.__doc__</pre></li>
                  
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>            return manager_method</pre></li>
                  
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>        new_methods = {}</pre></li>
                  
                  <li onclick="toggle('pre139711119071048', 'post139711119071048')"><pre>        # Refs http://bugs.python.org/issue1785.</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119071048')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119071048">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>name</td>
                    <td class="code"><pre>&#39;_insert&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>([&lt;Sample: Sample object&gt;],)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{&#39;fields&#39;: (&lt;django.db.models.fields.UUIDField: id&gt;,
            &lt;concurrency.fields.AutoIncVersionField: version&gt;,
            &lt;django.db.models.fields.BooleanField: public_data&gt;,
            &lt;django.db.models.fields.CharField: number&gt;,
            &lt;django.db.models.fields.related.ForeignKey: owner&gt;,
            &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;,
            &lt;django.db.models.fields.DateTimeField: collection_date&gt;,
            &lt;django.db.models.fields.TextField: description&gt;,
            &lt;django.db.models.fields.CharField: location_name&gt;,
            &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;,
            &lt;django.db.models.fields.FloatField: location_error&gt;,
            &lt;django.db.models.fields.related.ForeignKey: rock_type&gt;,
            &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;,
            &lt;django.db.models.fields.CharField: country&gt;,
            &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;,
            &lt;django.db.models.fields.CharField: collector_name&gt;,
            &lt;django.db.models.fields.related.ForeignKey: collector_id&gt;,
            &lt;django.db.models.fields.CharField: sesar_number&gt;),
 &#39;raw&#39;: False,
 &#39;return_id&#39;: False,
 &#39;using&#39;: &#39;default&#39;}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.manager.Manager object at 0x7f1108337cf8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/query.py</code> in <code>_insert</code>

          
            <div class="context" id="c139711119090824">
              
                <ol start="1032" class="pre-context" id="pre139711119090824">
                
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        the InsertQuery class and is how Model.save() is implemented.</pre></li>
                
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        self._for_write = True</pre></li>
                
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        if using is None:</pre></li>
                
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>            using = self.db</pre></li>
                
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        query = sql.InsertQuery(self.model)</pre></li>
                
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        query.insert_values(fields, objs, raw=raw)</pre></li>
                
                </ol>
              
              <ol start="1039" class="context-line">
                <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>
        return query.get_compiler(using=using).execute_sql(return_id)</pre> <span>...</span></li></ol>
              
                <ol start='1040' class="post-context" id="post139711119090824">
                  
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>    _insert.alters_data = True</pre></li>
                  
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>    _insert.queryset_only = False</pre></li>
                  
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>    def _batched_insert(self, objs, fields, batch_size):</pre></li>
                  
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139711119090824', 'post139711119090824')"><pre>        A little helper method for bulk_insert to insert the bulk one batch</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119090824')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119090824">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>objs</td>
                    <td class="code"><pre>[&lt;Sample: Sample object&gt;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>raw</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>query</td>
                    <td class="code"><pre>&lt;django.db.models.sql.subqueries.InsertQuery object at 0x7f1107b2ec88&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>[&lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &lt;Sample: Sample object&gt;, &#39;...(remaining elements truncated)...&#39;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>(&lt;django.db.models.fields.UUIDField: id&gt;,
 &lt;concurrency.fields.AutoIncVersionField: version&gt;,
 &lt;django.db.models.fields.BooleanField: public_data&gt;,
 &lt;django.db.models.fields.CharField: number&gt;,
 &lt;django.db.models.fields.related.ForeignKey: owner&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;,
 &lt;django.db.models.fields.DateTimeField: collection_date&gt;,
 &lt;django.db.models.fields.TextField: description&gt;,
 &lt;django.db.models.fields.CharField: location_name&gt;,
 &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;,
 &lt;django.db.models.fields.FloatField: location_error&gt;,
 &lt;django.db.models.fields.related.ForeignKey: rock_type&gt;,
 &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;,
 &lt;django.db.models.fields.CharField: country&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;,
 &lt;django.db.models.fields.CharField: collector_name&gt;,
 &lt;django.db.models.fields.related.ForeignKey: collector_id&gt;,
 &lt;django.db.models.fields.CharField: sesar_number&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>using</td>
                    <td class="code"><pre>&#39;default&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py</code> in <code>execute_sql</code>

          
            <div class="context" id="c139711119090888">
              
                <ol start="1056" class="pre-context" id="pre139711119090888">
                
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>                for p, vals in zip(placeholder_rows, param_rows)</pre></li>
                
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>            ]</pre></li>
                
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>    def execute_sql(self, return_id=False):</pre></li>
                
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>        assert not (return_id and len(self.query.objs) != 1)</pre></li>
                
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>        self.return_id = return_id</pre></li>
                
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>        with self.connection.cursor() as cursor:</pre></li>
                
                </ol>
              
              <ol start="1063" class="context-line">
                <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>
            for sql, params in self.as_sql():</pre> <span>...</span></li></ol>
              
                <ol start='1064' class="post-context" id="post139711119090888">
                  
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>                cursor.execute(sql, params)</pre></li>
                  
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>            if not (return_id and cursor):</pre></li>
                  
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>                return</pre></li>
                  
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>            if self.connection.features.can_return_id_from_insert:</pre></li>
                  
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>                return self.connection.ops.fetch_returned_insert_id(cursor)</pre></li>
                  
                  <li onclick="toggle('pre139711119090888', 'post139711119090888')"><pre>            return self.connection.ops.last_insert_id(cursor,</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119090888')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119090888">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cursor</td>
                    <td class="code"><pre>&lt;django.db.backends.utils.CursorDebugWrapper object at 0x7f1107bd57f0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>return_id</td>
                    <td class="code"><pre>False</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0x7f1107bd5320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py</code> in <code>as_sql</code>

          
            <div class="context" id="c139711119093256">
              
                <ol start="1016" class="pre-context" id="pre139711119093256">
                
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>        has_fields = bool(self.query.fields)</pre></li>
                
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>        fields = self.query.fields if has_fields else [opts.pk]</pre></li>
                
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>        result.append(&#39;(%s)&#39; % &#39;, &#39;.join(qn(f.column) for f in fields))</pre></li>
                
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>        if has_fields:</pre></li>
                
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>            value_rows = [</pre></li>
                
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>                [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]</pre></li>
                
                </ol>
              
              <ol start="1023" class="context-line">
                <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>
                for obj in self.query.objs</pre> <span>...</span></li></ol>
              
                <ol start='1024' class="post-context" id="post139711119093256">
                  
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>            ]</pre></li>
                  
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>            # An empty object.</pre></li>
                  
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>            value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]</pre></li>
                  
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre>            fields = [None]</pre></li>
                  
                  <li onclick="toggle('pre139711119093256', 'post139711119093256')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119093256')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119093256">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>opts</td>
                    <td class="code"><pre>&lt;Options for Sample&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>result</td>
                    <td class="code"><pre>[&#39;INSERT INTO &quot;samples&quot;&#39;,
 &#39;(&quot;id&quot;, &quot;version&quot;, &quot;public_data&quot;, &quot;number&quot;, &quot;owner_id&quot;, &quot;aliases&quot;, &#39;
 &#39;&quot;collection_date&quot;, &quot;description&quot;, &quot;location_name&quot;, &quot;location_coords&quot;, &#39;
 &#39;&quot;location_error&quot;, &quot;rock_type_id&quot;, &quot;date_precision&quot;, &quot;country&quot;, &quot;regions&quot;, &#39;
 &#39;&quot;collector_name&quot;, &quot;collector_id&quot;, &quot;sesar_number&quot;)&#39;]</pre></td>
                  </tr>
                
                  <tr>
                    <td>qn</td>
                    <td class="code"><pre>&lt;bound method PostGISOperations.quote_name of &lt;django.contrib.gis.db.backends.postgis.operations.PostGISOperations object at 0x7f1115acafd0&gt;&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>(&lt;django.db.models.fields.UUIDField: id&gt;,
 &lt;concurrency.fields.AutoIncVersionField: version&gt;,
 &lt;django.db.models.fields.BooleanField: public_data&gt;,
 &lt;django.db.models.fields.CharField: number&gt;,
 &lt;django.db.models.fields.related.ForeignKey: owner&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;,
 &lt;django.db.models.fields.DateTimeField: collection_date&gt;,
 &lt;django.db.models.fields.TextField: description&gt;,
 &lt;django.db.models.fields.CharField: location_name&gt;,
 &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;,
 &lt;django.db.models.fields.FloatField: location_error&gt;,
 &lt;django.db.models.fields.related.ForeignKey: rock_type&gt;,
 &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;,
 &lt;django.db.models.fields.CharField: country&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;,
 &lt;django.db.models.fields.CharField: collector_name&gt;,
 &lt;django.db.models.fields.related.ForeignKey: collector_id&gt;,
 &lt;django.db.models.fields.CharField: sesar_number&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0x7f1107bd5320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>has_fields</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py</code> in <code>&lt;listcomp&gt;</code>

          
            <div class="context" id="c139711119093320">
              
                <ol start="1016" class="pre-context" id="pre139711119093320">
                
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>        has_fields = bool(self.query.fields)</pre></li>
                
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>        fields = self.query.fields if has_fields else [opts.pk]</pre></li>
                
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>        result.append(&#39;(%s)&#39; % &#39;, &#39;.join(qn(f.column) for f in fields))</pre></li>
                
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>        if has_fields:</pre></li>
                
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>            value_rows = [</pre></li>
                
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>                [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]</pre></li>
                
                </ol>
              
              <ol start="1023" class="context-line">
                <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>
                for obj in self.query.objs</pre> <span>...</span></li></ol>
              
                <ol start='1024' class="post-context" id="post139711119093320">
                  
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>            ]</pre></li>
                  
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>            # An empty object.</pre></li>
                  
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>            value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]</pre></li>
                  
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre>            fields = [None]</pre></li>
                  
                  <li onclick="toggle('pre139711119093320', 'post139711119093320')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119093320')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119093320">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0x7f1107bd5320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>.0</td>
                    <td class="code"><pre>&lt;list_iterator object at 0x7f1107bd59b0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>fields</td>
                    <td class="code"><pre>(&lt;django.db.models.fields.UUIDField: id&gt;,
 &lt;concurrency.fields.AutoIncVersionField: version&gt;,
 &lt;django.db.models.fields.BooleanField: public_data&gt;,
 &lt;django.db.models.fields.CharField: number&gt;,
 &lt;django.db.models.fields.related.ForeignKey: owner&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: aliases&gt;,
 &lt;django.db.models.fields.DateTimeField: collection_date&gt;,
 &lt;django.db.models.fields.TextField: description&gt;,
 &lt;django.db.models.fields.CharField: location_name&gt;,
 &lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;,
 &lt;django.db.models.fields.FloatField: location_error&gt;,
 &lt;django.db.models.fields.related.ForeignKey: rock_type&gt;,
 &lt;django.db.models.fields.SmallIntegerField: date_precision&gt;,
 &lt;django.db.models.fields.CharField: country&gt;,
 &lt;django.contrib.postgres.fields.array.ArrayField: regions&gt;,
 &lt;django.db.models.fields.CharField: collector_name&gt;,
 &lt;django.db.models.fields.related.ForeignKey: collector_id&gt;,
 &lt;django.db.models.fields.CharField: sesar_number&gt;)</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py</code> in <code>&lt;listcomp&gt;</code>

          
            <div class="context" id="c139711119089928">
              
                <ol start="1015" class="pre-context" id="pre139711119089928">
                
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>        has_fields = bool(self.query.fields)</pre></li>
                
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>        fields = self.query.fields if has_fields else [opts.pk]</pre></li>
                
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>        result.append(&#39;(%s)&#39; % &#39;, &#39;.join(qn(f.column) for f in fields))</pre></li>
                
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>        if has_fields:</pre></li>
                
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>            value_rows = [</pre></li>
                
                </ol>
              
              <ol start="1022" class="context-line">
                <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>
                [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]</pre> <span>...</span></li></ol>
              
                <ol start='1023' class="post-context" id="post139711119089928">
                  
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>                for obj in self.query.objs</pre></li>
                  
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>            ]</pre></li>
                  
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>            # An empty object.</pre></li>
                  
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>            value_rows = [[self.connection.ops.pk_default_value()] for _ in self.query.objs]</pre></li>
                  
                  <li onclick="toggle('pre139711119089928', 'post139711119089928')"><pre>            fields = [None]</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119089928')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119089928">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>.0</td>
                    <td class="code"><pre>&lt;tuple_iterator object at 0x7f1107bd52e8&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0x7f1107bd5320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py</code> in <code>pre_save_val</code>

          
            <div class="context" id="c139711118982600">
              
                <ol start="965" class="pre-context" id="pre139711118982600">
                
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>    def pre_save_val(self, field, obj):</pre></li>
                
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        Get the given field&#39;s value off the given obj. pre_save() is used for</pre></li>
                
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        things like auto_now on DateTimeField. Skip it if this is a raw query.</pre></li>
                
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        if self.query.raw:</pre></li>
                
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>            return getattr(obj, field.attname)</pre></li>
                
                </ol>
              
              <ol start="972" class="context-line">
                <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>
        return field.pre_save(obj, add=True)</pre> <span>...</span></li></ol>
              
                <ol start='973' class="post-context" id="post139711118982600">
                  
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>    def assemble_as_sql(self, fields, value_rows):</pre></li>
                  
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        Take a sequence of N fields and a sequence of M rows of values,</pre></li>
                  
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        generate placeholder SQL and parameters for each field and value, and</pre></li>
                  
                  <li onclick="toggle('pre139711118982600', 'post139711118982600')"><pre>        return a pair containing:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711118982600')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711118982600">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.db.models.sql.compiler.SQLInsertCompiler object at 0x7f1107bd5320&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>field</td>
                    <td class="code"><pre>&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/fields/__init__.py</code> in <code>pre_save</code>

          
            <div class="context" id="c139711118982472">
              
                <ol start="695" class="pre-context" id="pre139711118982472">
                
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>    def get_internal_type(self):</pre></li>
                
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        return self.__class__.__name__</pre></li>
                
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>    def pre_save(self, model_instance, add):</pre></li>
                
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        &quot;&quot;&quot;</pre></li>
                
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        Returns field&#39;s value just before saving.</pre></li>
                
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        &quot;&quot;&quot;</pre></li>
                
                </ol>
              
              <ol start="702" class="context-line">
                <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>
        return getattr(model_instance, self.attname)</pre> <span>...</span></li></ol>
              
                <ol start='703' class="post-context" id="post139711118982472">
                  
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>    def get_prep_value(self, value):</pre></li>
                  
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        Perform preliminary non-db specific value checks and conversions.</pre></li>
                  
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139711118982472', 'post139711118982472')"><pre>        if isinstance(value, Promise):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711118982472')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711118982472">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>add</td>
                    <td class="code"><pre>True</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.contrib.gis.db.models.fields.PointField: location_coords&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>model_instance</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/db/models/proxy.py</code> in <code>__get__</code>

          
            <div class="context" id="c139711119444040">
              
                <ol start="34" class="pre-context" id="pre139711119444040">
                
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>        if isinstance(geo_value, self._klass):</pre></li>
                
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>            geo_obj = geo_value</pre></li>
                
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>        elif (geo_value is None) or (geo_value == &#39;&#39;):</pre></li>
                
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>            geo_obj = None</pre></li>
                
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>        else:</pre></li>
                
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>            # Otherwise, a geometry or raster object is built using the field&#39;s</pre></li>
                
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>            # contents, and the model&#39;s corresponding attribute is set.</pre></li>
                
                </ol>
              
              <ol start="41" class="context-line">
                <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>
            geo_obj = self._klass(geo_value)</pre> <span>...</span></li></ol>
              
                <ol start='42' class="post-context" id="post139711119444040">
                  
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>            setattr(obj, self._field.attname, geo_obj)</pre></li>
                  
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>        return geo_obj</pre></li>
                  
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>    def __set__(self, obj, value):</pre></li>
                  
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>        &quot;&quot;&quot;</pre></li>
                  
                  <li onclick="toggle('pre139711119444040', 'post139711119444040')"><pre>        This accessor sets the proxied geometry or raster with the</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711119444040')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711119444040">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>geo_value</td>
                    <td class="code"><pre>&#39;5&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.contrib.gis.db.models.proxy.SpatialProxy object at 0x7f11083375c0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>obj</td>
                    <td class="code"><pre>&lt;Sample: Sample object&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>type</td>
                    <td class="code"><pre>&lt;class &#39;apps.samples.models.Sample&#39;&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/geometry.py</code> in <code>__init__</code>

          
            <div class="context" id="c139711121226888">
              
                <ol start="53" class="pre-context" id="pre139711121226888">
                
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>            if wkt_m:</pre></li>
                
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                # Handling WKT input.</pre></li>
                
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                if wkt_m.group(&#39;srid&#39;):</pre></li>
                
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                    srid = int(wkt_m.group(&#39;srid&#39;))</pre></li>
                
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                g = wkt_r().read(force_bytes(wkt_m.group(&#39;wkt&#39;)))</pre></li>
                
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>            elif hex_regex.match(geo_input):</pre></li>
                
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                # Handling HEXEWKB input.</pre></li>
                
                </ol>
              
              <ol start="60" class="context-line">
                <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>
                g = wkb_r().read(force_bytes(geo_input))</pre> <span>...</span></li></ol>
              
                <ol start='61' class="post-context" id="post139711121226888">
                  
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>            elif json_regex.match(geo_input):</pre></li>
                  
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                # Handling GeoJSON input.</pre></li>
                  
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                if not gdal.HAS_GDAL:</pre></li>
                  
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                    raise ValueError(&#39;Initializing geometry from JSON input requires GDAL.&#39;)</pre></li>
                  
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>                g = wkb_r().read(gdal.OGRGeometry(geo_input).wkb)</pre></li>
                  
                  <li onclick="toggle('pre139711121226888', 'post139711121226888')"><pre>            else:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121226888')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121226888">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>srid</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>Error in formatting: GEOSException: NULL GEOS GEOSGeometry pointer encountered.</pre></td>
                  </tr>
                
                  <tr>
                    <td>geo_input</td>
                    <td class="code"><pre>&#39;5&#39;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wkt_m</td>
                    <td class="code"><pre>None</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/prototypes/io.py</code> in <code>read</code>

          
            <div class="context" id="c139711121226632">
              
                <ol start="160" class="pre-context" id="pre139711121226632">
                
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>    def read(self, wkb):</pre></li>
                
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>        &quot;Returns a _pointer_ to C GEOS Geometry object from the given WKB.&quot;</pre></li>
                
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>        if isinstance(wkb, six.memoryview):</pre></li>
                
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>            wkb_s = bytes(wkb)</pre></li>
                
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>            return wkb_reader_read(self.ptr, wkb_s, len(wkb_s))</pre></li>
                
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>        elif isinstance(wkb, (bytes, six.string_types)):</pre></li>
                
                </ol>
              
              <ol start="167" class="context-line">
                <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>
            return wkb_reader_read_hex(self.ptr, wkb, len(wkb))</pre> <span>...</span></li></ol>
              
                <ol start='168' class="post-context" id="post139711121226632">
                  
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>            raise TypeError</pre></li>
                  
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre># ### WKB/WKT Writer Classes ###</pre></li>
                  
                  <li onclick="toggle('pre139711121226632', 'post139711121226632')"><pre>class WKTWriter(IOBase):</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711121226632')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711121226632">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.contrib.gis.geos.prototypes.io._WKBReader object at 0x7f1107e926a0&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>wkb</td>
                    <td class="code"><pre>b&#39;5&#39;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/libgeos.py</code> in <code>__call__</code>

          
            <div class="context" id="c139711120661064">
              
                <ol start="150" class="pre-context" id="pre139711120661064">
                
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        self.args = args</pre></li>
                
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        self.kwargs = kwargs</pre></li>
                
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        self.func = None</pre></li>
                
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>    def __call__(self, *args, **kwargs):</pre></li>
                
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        if self.func is None:</pre></li>
                
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>            self.func = self.get_func(*self.args, **self.kwargs)</pre></li>
                
                </ol>
              
              <ol start="157" class="context-line">
                <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>
        return self.func(*args, **kwargs)</pre> <span>...</span></li></ol>
              
                <ol start='158' class="post-context" id="post139711120661064">
                  
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>    def get_func(self, *args, **kwargs):</pre></li>
                  
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        from django.contrib.gis.geos.prototypes.threadsafe import GEOSFunc</pre></li>
                  
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        func = GEOSFunc(self.func_name)</pre></li>
                  
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        func.argtypes = self.argtypes or []</pre></li>
                  
                  <li onclick="toggle('pre139711120661064', 'post139711120661064')"><pre>        func.restype = self.restype</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120661064')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120661064">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.contrib.gis.geos.prototypes.io.LP_WKBReader_st object at 0x7f1107e907b8&gt;,
 b&#39;5&#39;,
 1)</pre></td>
                  </tr>
                
                  <tr>
                    <td>kwargs</td>
                    <td class="code"><pre>{}</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.contrib.gis.geos.prototypes.io.WKBReadFunc object at 0x7f11086e0f60&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/prototypes/threadsafe.py</code> in <code>__call__</code>

          
            <div class="context" id="c139711120661640">
              
                <ol start="49" class="pre-context" id="pre139711120661640">
                
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>    def __call__(self, *args):</pre></li>
                
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>        if self.threaded:</pre></li>
                
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>            # If a context handle does not exist for this thread, initialize one.</pre></li>
                
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>            if not self.thread_context.handle:</pre></li>
                
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>                self.thread_context.handle = GEOSContextHandle()</pre></li>
                
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>            # Call the threaded GEOS routine with pointer of the context handle</pre></li>
                
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>            # as the first argument.</pre></li>
                
                </ol>
              
              <ol start="56" class="context-line">
                <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>
            return self.cfunc(self.thread_context.handle.ptr, *args)</pre> <span>...</span></li></ol>
              
                <ol start='57' class="post-context" id="post139711120661640">
                  
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>        else:</pre></li>
                  
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>            return self.cfunc(*args)</pre></li>
                  
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>    def __str__(self):</pre></li>
                  
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre>        return self.cfunc.__name__</pre></li>
                  
                  <li onclick="toggle('pre139711120661640', 'post139711120661640')"><pre></pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120661640')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120661640">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>args</td>
                    <td class="code"><pre>(&lt;django.contrib.gis.geos.prototypes.io.LP_WKBReader_st object at 0x7f1107e907b8&gt;,
 b&#39;5&#39;,
 1)</pre></td>
                  </tr>
                
                  <tr>
                    <td>self</td>
                    <td class="code"><pre>&lt;django.contrib.gis.geos.prototypes.threadsafe.GEOSFunc object at 0x7f1107e92320&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
        
        <li class="frame django">
          <code>/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/prototypes/errcheck.py</code> in <code>check_geom</code>

          
            <div class="context" id="c139711120659976">
              
                <ol start="25" class="pre-context" id="pre139711120659976">
                
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>    # Double passed in by reference, return its value.</pre></li>
                
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>    return last_arg_byref(cargs)</pre></li>
                
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre></pre></li>
                
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>def check_geom(result, func, cargs):</pre></li>
                
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>    &quot;Error checking on routines that return Geometries.&quot;</pre></li>
                
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>    if not result:</pre></li>
                
                </ol>
              
              <ol start="32" class="context-line">
                <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>
        raise GEOSException(&#39;Error encountered checking Geometry returned from GEOS C function &quot;%s&quot;.&#39; % func.__name__)</pre> <span>...</span></li></ol>
              
                <ol start='33' class="post-context" id="post139711120659976">
                  
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>    return result</pre></li>
                  
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre></pre></li>
                  
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>def check_minus_one(result, func, cargs):</pre></li>
                  
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>    &quot;Error checking on routines that should not return -1.&quot;</pre></li>
                  
                  <li onclick="toggle('pre139711120659976', 'post139711120659976')"><pre>    if result == -1:</pre></li>
                  
              </ol>
              
            </div>
          

          
            <div class="commands">
                
                    <a href="#" onclick="return varToggle(this, '139711120659976')"><span>&#x25b6;</span> Local vars</a>
                
            </div>
            <table class="vars" id="v139711120659976">
              <thead>
                <tr>
                  <th>Variable</th>
                  <th>Value</th>
                </tr>
              </thead>
              <tbody>
                
                  <tr>
                    <td>cargs</td>
                    <td class="code"><pre>(&lt;django.contrib.gis.geos.libgeos.LP_GEOSContextHandle_t object at 0x7f1107e81e18&gt;,
 &lt;django.contrib.gis.geos.prototypes.io.LP_WKBReader_st object at 0x7f1107e907b8&gt;,
 b&#39;5&#39;,
 1)</pre></td>
                  </tr>
                
                  <tr>
                    <td>func</td>
                    <td class="code"><pre>&lt;_FuncPtr object at 0x7f11081d5f20&gt;</pre></td>
                  </tr>
                
                  <tr>
                    <td>result</td>
                    <td class="code"><pre>&lt;django.contrib.gis.geos.libgeos.LP_GEOSGeom_t object at 0x7f1107a9dbf8&gt;</pre></td>
                  </tr>
                
              </tbody>
            </table>
          
        </li>
      
    </ul>
  </div>
  
  <form action="http://dpaste.com/" name="pasteform" id="pasteform" method="post">

  <div id="pastebinTraceback" class="pastebin">
    <input type="hidden" name="language" value="PythonConsole">
    <input type="hidden" name="title"
      value="GEOSException at /api/samples/">
    <input type="hidden" name="source" value="Django Dpaste Agent">
    <input type="hidden" name="poster" value="Django">
    <textarea name="content" id="traceback_area" cols="140" rows="25">
Environment:


Request Method: POST
Request URL: http://52.90.182.216/api/samples/

Django Version: 1.9
Python Version: 3.4.3
Installed Applications:
(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;rest_framework.authtoken&#39;,
 &#39;django_extensions&#39;,
 &#39;vendor.djoser.djoser&#39;,
 &#39;legacy&#39;,
 &#39;api&#39;,
 &#39;apps&#39;,
 &#39;apps.chemical_analyses&#39;,
 &#39;apps.samples&#39;,
 &#39;apps.users&#39;)
Installed Middleware:
(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)



Traceback:

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/core/handlers/base.py" in get_response
  149.                     response = self.process_exception_by_middleware(e, request)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/core/handlers/base.py" in get_response
  147.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/views/decorators/csrf.py" in wrapped_view
  58.         return view_func(*args, **kwargs)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/viewsets.py" in view
  87.             return self.dispatch(request, *args, **kwargs)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/views.py" in dispatch
  466.             response = self.handle_exception(exc)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/views.py" in dispatch
  463.             response = handler(request, *args, **kwargs)

File "/home/metpetdb/api/metpetdb_api/api/samples/v1/views.py" in create
  156.         instance = self.perform_create(serializer)

File "/home/metpetdb/api/metpetdb_api/api/samples/v1/views.py" in perform_create
  150.         return serializer.save()

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/serializers.py" in save
  191.             self.instance = self.create(validated_data)

File "/home/metpetdb/api/metpetdb_api/api/samples/v1/serializers.py" in create
  82.         instance = super().create(validated_data)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/rest_framework/serializers.py" in create
  846.             instance = ModelClass.objects.create(**validated_data)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/manager.py" in manager_method
  122.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/query.py" in create
  401.         obj.save(force_insert=True, using=self.db)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py" in save
  700.                        force_update=force_update, update_fields=update_fields)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py" in save_base
  728.             updated = self._save_table(raw, cls, force_insert, force_update, using, update_fields)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py" in _save_table
  812.             result = self._do_insert(cls._base_manager, using, fields, update_pk, raw)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/base.py" in _do_insert
  851.                                using=using, raw=raw)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/manager.py" in manager_method
  122.                 return getattr(self.get_queryset(), name)(*args, **kwargs)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/query.py" in _insert
  1039.         return query.get_compiler(using=using).execute_sql(return_id)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py" in execute_sql
  1063.             for sql, params in self.as_sql():

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py" in as_sql
  1023.                 for obj in self.query.objs

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py" in &lt;listcomp&gt;
  1023.                 for obj in self.query.objs

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py" in &lt;listcomp&gt;
  1022.                 [self.prepare_value(field, self.pre_save_val(field, obj)) for field in fields]

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/sql/compiler.py" in pre_save_val
  972.         return field.pre_save(obj, add=True)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/db/models/fields/__init__.py" in pre_save
  702.         return getattr(model_instance, self.attname)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/db/models/proxy.py" in __get__
  41.             geo_obj = self._klass(geo_value)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/geometry.py" in __init__
  60.                 g = wkb_r().read(force_bytes(geo_input))

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/prototypes/io.py" in read
  167.             return wkb_reader_read_hex(self.ptr, wkb, len(wkb))

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/libgeos.py" in __call__
  157.         return self.func(*args, **kwargs)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/prototypes/threadsafe.py" in __call__
  56.             return self.cfunc(self.thread_context.handle.ptr, *args)

File "/home/metpetdb/.virtualenvs/api/local/lib/python3.4/site-packages/django/contrib/gis/geos/prototypes/errcheck.py" in check_geom
  32.         raise GEOSException(&#39;Error encountered checking Geometry returned from GEOS C function &quot;%s&quot;.&#39; % func.__name__)

Exception Type: GEOSException at /api/samples/
Exception Value: Error encountered checking Geometry returned from GEOS C function &quot;GEOSWKBReader_readHEX_r&quot;.
</textarea>
  <br><br>
  <input type="submit" value="Share this traceback on a public Web site">
  </div>
</form>
</div>



<div id="requestinfo">
  <h2>Request information</h2>


  <h3 id="get-info">GET</h3>
  
    <p>No GET data</p>
  

  <h3 id="post-info">POST</h3>
  
    <p>No POST data</p>
  
  <h3 id="files-info">FILES</h3>
  
    <p>No FILES data</p>
  


  <h3 id="cookie-info">COOKIES</h3>
  
    <p>No cookie data</p>
  

  <h3 id="meta-info">META</h3>
  <table class="req">
    <thead>
      <tr>
        <th>Variable</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>SCRIPT_NAME</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multithread</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_USER_AGENT</td>
          <td class="code"><pre>&#39;curl/7.35.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_PORT</td>
          <td class="code"><pre>&#39;47997&#39;</pre></td>
        </tr>
      
        <tr>
          <td>RAW_URI</td>
          <td class="code"><pre>&#39;/api/samples/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_ACCEPT</td>
          <td class="code"><pre>&#39;*/*&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_AUTHORIZATION</td>
          <td class="code"><pre>&#39;Token 0fb2d22667fcdb22b2c430b39a1277a024692c13&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.errors</td>
          <td class="code"><pre>&lt;gunicorn.http.wsgi.WSGIErrorsWrapper object at 0x7f1107b7f908&gt;</pre></td>
        </tr>
      
        <tr>
          <td>QUERY_STRING</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.version</td>
          <td class="code"><pre>(1, 0)</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.file_wrapper</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.run_once</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PROTOCOL</td>
          <td class="code"><pre>&#39;HTTP/1.0&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.url_scheme</td>
          <td class="code"><pre>&#39;http&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_CONNECTION</td>
          <td class="code"><pre>&#39;close&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.multiprocess</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>PATH_INFO</td>
          <td class="code"><pre>&#39;/api/samples/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_NAME</td>
          <td class="code"><pre>&#39;127.0.0.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_SOFTWARE</td>
          <td class="code"><pre>&#39;gunicorn/19.4.5&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_LENGTH</td>
          <td class="code"><pre>&#39;372&#39;</pre></td>
        </tr>
      
        <tr>
          <td>wsgi.input</td>
          <td class="code"><pre>&lt;gunicorn.http.body.Body object at 0x7f1107b7fc50&gt;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_PORT</td>
          <td class="code"><pre>&#39;8001&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONTENT_TYPE</td>
          <td class="code"><pre>&#39;application/json&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_HOST</td>
          <td class="code"><pre>&#39;52.90.182.216&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REMOTE_ADDR</td>
          <td class="code"><pre>&#39;127.0.0.1&#39;</pre></td>
        </tr>
      
        <tr>
          <td>gunicorn.socket</td>
          <td class="code"><pre>&lt;socket.socket fd=11, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=0, laddr=(&#39;127.0.0.1&#39;, 8001), raddr=(&#39;127.0.0.1&#39;, 47997)&gt;</pre></td>
        </tr>
      
        <tr>
          <td>REQUEST_METHOD</td>
          <td class="code"><pre>&#39;POST&#39;</pre></td>
        </tr>
      
        <tr>
          <td>HTTP_X_FORWARDED_FOR</td>
          <td class="code"><pre>&#39;129.161.36.130&#39;</pre></td>
        </tr>
      
    </tbody>
  </table>


  <h3 id="settings-info">Settings</h3>
  <h4>Using settings module <code>settings.staging</code></h4>
  <table class="req">
    <thead>
      <tr>
        <th>Setting</th>
        <th>Value</th>
      </tr>
    </thead>
    <tbody>
      
        <tr>
          <td>AUTH_USER_MODEL</td>
          <td class="code"><pre>&#39;users.User&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_KEY_PREFIX</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_USER</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST</td>
          <td class="code"><pre>&#39;localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MIGRATION_MODULES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>MANAGERS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATE_FORMAT</td>
          <td class="code"><pre>&#39;N j, Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONCURRENCY_FIELD_SIGNER</td>
          <td class="code"><pre>&#39;concurrency.forms.VersionFieldSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_NAME</td>
          <td class="code"><pre>&#39;django_language&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FROM_EMAIL</td>
          <td class="code"><pre>&#39;webmaster@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_HTTPONLY</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CONCURRENCY_MANUAL_TRIGGERS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_CONTENT_TYPE_NOSNIFF</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LOGOUT_URL</td>
          <td class="code"><pre>&#39;/accounts/logout/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_FILE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>USE_I18N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SETTINGS_MODULE</td>
          <td class="code"><pre>&#39;settings.staging&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_STORAGE</td>
          <td class="code"><pre>&#39;django.contrib.staticfiles.storage.StaticFilesStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DISALLOWED_USER_AGENTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>NUMBER_GROUPING</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>USE_L10N</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SAVE_EVERY_REQUEST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_PATH</td>
          <td class="code"><pre>&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_PATH</td>
          <td class="code"><pre>&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>PREPEND_WWW</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_URL</td>
          <td class="code"><pre>&#39;/accounts/login/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CHARSET</td>
          <td class="code"><pre>&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_CERTFILE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES_BIDI</td>
          <td class="code"><pre>[&#39;he&#39;, &#39;ar&#39;, &#39;fa&#39;, &#39;ur&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>CACHES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;BACKEND&#39;: &#39;django.core.cache.backends.locmem.LocMemCache&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MONTH_DAY_FORMAT</td>
          <td class="code"><pre>&#39;F j&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MESSAGE_STORAGE</td>
          <td class="code"><pre>&#39;django.contrib.messages.storage.fallback.FallbackStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_REDIRECT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_FAILURE_VIEW</td>
          <td class="code"><pre>&#39;django.views.csrf.csrf_failure&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SSL_KEYFILE</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_SUBJECT_PREFIX</td>
          <td class="code"><pre>&#39;[Django] &#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATABASES</td>
          <td class="code"><pre>{&#39;default&#39;: {&#39;ATOMIC_REQUESTS&#39;: False,
             &#39;AUTOCOMMIT&#39;: True,
             &#39;CONN_MAX_AGE&#39;: 0,
             &#39;ENGINE&#39;: &#39;django.contrib.gis.db.backends.postgis&#39;,
             &#39;HOST&#39;: &#39;localhost&#39;,
             &#39;NAME&#39;: &#39;metpetdb&#39;,
             &#39;OPTIONS&#39;: {},
             &#39;PASSWORD&#39;: &#39;********************&#39;,
             &#39;PORT&#39;: &#39;&#39;,
             &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                      &#39;COLLATION&#39;: None,
                      &#39;MIRROR&#39;: None,
                      &#39;NAME&#39;: &#39;metpetdb_test&#39;},
             &#39;TIME_ZONE&#39;: None,
             &#39;USER&#39;: &#39;metpetdb&#39;},
 &#39;legacy&#39;: {&#39;ATOMIC_REQUESTS&#39;: False,
            &#39;AUTOCOMMIT&#39;: True,
            &#39;CONN_MAX_AGE&#39;: 0,
            &#39;ENGINE&#39;: &#39;django.contrib.gis.db.backends.postgis&#39;,
            &#39;HOST&#39;: &#39;localhost&#39;,
            &#39;NAME&#39;: &#39;metpetdb_legacy&#39;,
            &#39;OPTIONS&#39;: {},
            &#39;PASSWORD&#39;: &#39;********************&#39;,
            &#39;PORT&#39;: &#39;&#39;,
            &#39;TEST&#39;: {&#39;CHARSET&#39;: None,
                     &#39;COLLATION&#39;: None,
                     &#39;MIRROR&#39;: None,
                     &#39;NAME&#39;: None},
            &#39;TIME_ZONE&#39;: None,
            &#39;USER&#39;: &#39;metpetdb&#39;}}</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>FIXTURE_DIRS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>MIDDLEWARE_CLASSES</td>
          <td class="code"><pre>(&#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
 &#39;django.middleware.common.CommonMiddleware&#39;,
 &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
 &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
 &#39;django.contrib.auth.middleware.SessionAuthenticationMiddleware&#39;,
 &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
 &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
 &#39;django.middleware.security.SecurityMiddleware&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_HOST_PASSWORD</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>BASE_DIR</td>
          <td class="code"><pre>&#39;/home/metpetdb/api/metpetdb_api&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_TLS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATE_DEBUG</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FILE_CHARSET</td>
          <td class="code"><pre>&#39;utf-8&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_ROOT</td>
          <td class="code"><pre>&#39;/home/metpetdb/api/metpetdb_api/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_AGE</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_INCLUDE_SUBDOMAINS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_HEADER_NAME</td>
          <td class="code"><pre>&#39;HTTP_X_CSRFTOKEN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_HOSTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>DATABASE_ROUTERS</td>
          <td class="code"><pre>[&#39;settings.routing.LegacyRouter&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_RESET_TIMEOUT_DAYS</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_ALIAS</td>
          <td class="code"><pre>&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_PORT</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>CONCURRENCY_ENABLED</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_MAX_MEMORY_SIZE</td>
          <td class="code"><pre>2621440</pre></td>
        </tr>
      
        <tr>
          <td>X_FRAME_OPTIONS</td>
          <td class="code"><pre>&#39;SAMEORIGIN&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_DIRECTORY_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>CONCURRENCY_CALLBACK</td>
          <td class="code"><pre>&#39;concurrency.views.callback&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_EXPIRE_AT_BROWSER_CLOSE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>USE_TZ</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>ABSOLUTE_URL_OVERRIDES</td>
          <td class="code"><pre>{}</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_USE_SSL</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>FORMAT_MODULE_PATH</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>IGNORABLE_404_URLS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_SERIALIZER</td>
          <td class="code"><pre>&#39;django.contrib.sessions.serializers.JSONSerializer&#39;</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_TIMEOUT</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_EXCEPTION_REPORTER_FILTER</td>
          <td class="code"><pre>&#39;django.views.debug.SafeExceptionReporterFilter&#39;</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_URL</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_HANDLERS</td>
          <td class="code"><pre>[&#39;django.core.files.uploadhandler.MemoryFileUploadHandler&#39;,
 &#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGES</td>
          <td class="code"><pre>[(&#39;af&#39;, &#39;Afrikaans&#39;),
 (&#39;ar&#39;, &#39;Arabic&#39;),
 (&#39;ast&#39;, &#39;Asturian&#39;),
 (&#39;az&#39;, &#39;Azerbaijani&#39;),
 (&#39;bg&#39;, &#39;Bulgarian&#39;),
 (&#39;be&#39;, &#39;Belarusian&#39;),
 (&#39;bn&#39;, &#39;Bengali&#39;),
 (&#39;br&#39;, &#39;Breton&#39;),
 (&#39;bs&#39;, &#39;Bosnian&#39;),
 (&#39;ca&#39;, &#39;Catalan&#39;),
 (&#39;cs&#39;, &#39;Czech&#39;),
 (&#39;cy&#39;, &#39;Welsh&#39;),
 (&#39;da&#39;, &#39;Danish&#39;),
 (&#39;de&#39;, &#39;German&#39;),
 (&#39;el&#39;, &#39;Greek&#39;),
 (&#39;en&#39;, &#39;English&#39;),
 (&#39;en-au&#39;, &#39;Australian English&#39;),
 (&#39;en-gb&#39;, &#39;British English&#39;),
 (&#39;eo&#39;, &#39;Esperanto&#39;),
 (&#39;es&#39;, &#39;Spanish&#39;),
 (&#39;es-ar&#39;, &#39;Argentinian Spanish&#39;),
 (&#39;es-co&#39;, &#39;Colombian Spanish&#39;),
 (&#39;es-mx&#39;, &#39;Mexican Spanish&#39;),
 (&#39;es-ni&#39;, &#39;Nicaraguan Spanish&#39;),
 (&#39;es-ve&#39;, &#39;Venezuelan Spanish&#39;),
 (&#39;et&#39;, &#39;Estonian&#39;),
 (&#39;eu&#39;, &#39;Basque&#39;),
 (&#39;fa&#39;, &#39;Persian&#39;),
 (&#39;fi&#39;, &#39;Finnish&#39;),
 (&#39;fr&#39;, &#39;French&#39;),
 (&#39;fy&#39;, &#39;Frisian&#39;),
 (&#39;ga&#39;, &#39;Irish&#39;),
 (&#39;gd&#39;, &#39;Scottish Gaelic&#39;),
 (&#39;gl&#39;, &#39;Galician&#39;),
 (&#39;he&#39;, &#39;Hebrew&#39;),
 (&#39;hi&#39;, &#39;Hindi&#39;),
 (&#39;hr&#39;, &#39;Croatian&#39;),
 (&#39;hu&#39;, &#39;Hungarian&#39;),
 (&#39;ia&#39;, &#39;Interlingua&#39;),
 (&#39;id&#39;, &#39;Indonesian&#39;),
 (&#39;io&#39;, &#39;Ido&#39;),
 (&#39;is&#39;, &#39;Icelandic&#39;),
 (&#39;it&#39;, &#39;Italian&#39;),
 (&#39;ja&#39;, &#39;Japanese&#39;),
 (&#39;ka&#39;, &#39;Georgian&#39;),
 (&#39;kk&#39;, &#39;Kazakh&#39;),
 (&#39;km&#39;, &#39;Khmer&#39;),
 (&#39;kn&#39;, &#39;Kannada&#39;),
 (&#39;ko&#39;, &#39;Korean&#39;),
 (&#39;lb&#39;, &#39;Luxembourgish&#39;),
 (&#39;lt&#39;, &#39;Lithuanian&#39;),
 (&#39;lv&#39;, &#39;Latvian&#39;),
 (&#39;mk&#39;, &#39;Macedonian&#39;),
 (&#39;ml&#39;, &#39;Malayalam&#39;),
 (&#39;mn&#39;, &#39;Mongolian&#39;),
 (&#39;mr&#39;, &#39;Marathi&#39;),
 (&#39;my&#39;, &#39;Burmese&#39;),
 (&#39;nb&#39;, &#39;Norwegian Bokmal&#39;),
 (&#39;ne&#39;, &#39;Nepali&#39;),
 (&#39;nl&#39;, &#39;Dutch&#39;),
 (&#39;nn&#39;, &#39;Norwegian Nynorsk&#39;),
 (&#39;os&#39;, &#39;Ossetic&#39;),
 (&#39;pa&#39;, &#39;Punjabi&#39;),
 (&#39;pl&#39;, &#39;Polish&#39;),
 (&#39;pt&#39;, &#39;Portuguese&#39;),
 (&#39;pt-br&#39;, &#39;Brazilian Portuguese&#39;),
 (&#39;ro&#39;, &#39;Romanian&#39;),
 (&#39;ru&#39;, &#39;Russian&#39;),
 (&#39;sk&#39;, &#39;Slovak&#39;),
 (&#39;sl&#39;, &#39;Slovenian&#39;),
 (&#39;sq&#39;, &#39;Albanian&#39;),
 (&#39;sr&#39;, &#39;Serbian&#39;),
 (&#39;sr-latn&#39;, &#39;Serbian Latin&#39;),
 (&#39;sv&#39;, &#39;Swedish&#39;),
 (&#39;sw&#39;, &#39;Swahili&#39;),
 (&#39;ta&#39;, &#39;Tamil&#39;),
 (&#39;te&#39;, &#39;Telugu&#39;),
 (&#39;th&#39;, &#39;Thai&#39;),
 (&#39;tr&#39;, &#39;Turkish&#39;),
 (&#39;tt&#39;, &#39;Tatar&#39;),
 (&#39;udm&#39;, &#39;Udmurt&#39;),
 (&#39;uk&#39;, &#39;Ukrainian&#39;),
 (&#39;ur&#39;, &#39;Urdu&#39;),
 (&#39;vi&#39;, &#39;Vietnamese&#39;),
 (&#39;zh-hans&#39;, &#39;Simplified Chinese&#39;),
 (&#39;zh-hant&#39;, &#39;Traditional Chinese&#39;)]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#39;%H:%M:%S&#39;, &#39;%H:%M:%S.%f&#39;, &#39;%H:%M&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_NON_SERIALIZED_APPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATES</td>
          <td class="code"><pre>[{&#39;APP_DIRS&#39;: True,
  &#39;BACKEND&#39;: &#39;django.template.backends.django.DjangoTemplates&#39;,
  &#39;DIRS&#39;: [],
  &#39;OPTIONS&#39;: {&#39;context_processors&#39;: [&#39;django.template.context_processors.debug&#39;,
                                     &#39;django.template.context_processors.request&#39;,
                                     &#39;django.contrib.auth.context_processors.auth&#39;,
                                     &#39;django.contrib.messages.context_processors.messages&#39;]}}]</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_PERMISSIONS</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>FILE_UPLOAD_TEMP_DIR</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>DATE_INPUT_FORMATS</td>
          <td class="code"><pre>[&#39;%Y-%m-%d&#39;,
 &#39;%m/%d/%Y&#39;,
 &#39;%m/%d/%y&#39;,
 &#39;%b %d %Y&#39;,
 &#39;%b %d, %Y&#39;,
 &#39;%d %b %Y&#39;,
 &#39;%d %b, %Y&#39;,
 &#39;%B %d %Y&#39;,
 &#39;%B %d, %Y&#39;,
 &#39;%d %B %Y&#39;,
 &#39;%d %B, %Y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_BROWSER_XSS_FILTER</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_HTTPONLY</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>LOCALE_PATHS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TIME_ZONE</td>
          <td class="code"><pre>&#39;UTC&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SILENCED_SYSTEM_CHECKS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>TEST_RUNNER</td>
          <td class="code"><pre>&#39;django.test.runner.DiscoverRunner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_ENGINE</td>
          <td class="code"><pre>&#39;django.contrib.sessions.backends.db&#39;</pre></td>
        </tr>
      
        <tr>
          <td>REST_FRAMEWORK</td>
          <td class="code"><pre>{&#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: (&#39;rest_framework.authentication.TokenAuthentication&#39;,),
 &#39;MAX_PAGINATE_BY&#39;: 2000,
 &#39;PAGE_SIZE&#39;: 20,
 &#39;PAGINATE_BY_PARAM&#39;: &#39;page_size&#39;,
 &#39;TEST_REQUEST_DEFAULT_FORMAT&#39;: &#39;json&#39;}</pre></td>
        </tr>
      
        <tr>
          <td>THOUSAND_SEPARATOR</td>
          <td class="code"><pre>&#39;,&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_INPUT_FORMATS</td>
          <td class="code"><pre>[&#39;%Y-%m-%d %H:%M:%S&#39;,
 &#39;%Y-%m-%d %H:%M:%S.%f&#39;,
 &#39;%Y-%m-%d %H:%M&#39;,
 &#39;%Y-%m-%d&#39;,
 &#39;%m/%d/%Y %H:%M:%S&#39;,
 &#39;%m/%d/%Y %H:%M:%S.%f&#39;,
 &#39;%m/%d/%Y %H:%M&#39;,
 &#39;%m/%d/%Y&#39;,
 &#39;%m/%d/%y %H:%M:%S&#39;,
 &#39;%m/%d/%y %H:%M:%S.%f&#39;,
 &#39;%m/%d/%y %H:%M&#39;,
 &#39;%m/%d/%y&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>DECIMAL_SEPARATOR</td>
          <td class="code"><pre>&#39;.&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_FILE_STORAGE</td>
          <td class="code"><pre>&#39;django.core.files.storage.FileSystemStorage&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_INDEX_TABLESPACE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_SECURE</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATE_FORMAT</td>
          <td class="code"><pre>&#39;m/d/Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATE_STRING_IF_INVALID</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SERVER_EMAIL</td>
          <td class="code"><pre>&#39;root@localhost&#39;</pre></td>
        </tr>
      
        <tr>
          <td>STATIC_URL</td>
          <td class="code"><pre>&#39;/api/static/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATE_CONTEXT_PROCESSORS</td>
          <td class="code"><pre>[&#39;django.contrib.auth.context_processors.auth&#39;,
 &#39;django.template.context_processors.debug&#39;,
 &#39;django.template.context_processors.i18n&#39;,
 &#39;django.template.context_processors.media&#39;,
 &#39;django.template.context_processors.static&#39;,
 &#39;django.template.context_processors.tz&#39;,
 &#39;django.contrib.messages.context_processors.messages&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>SIGNING_BACKEND</td>
          <td class="code"><pre>&#39;django.core.signing.TimestampSigner&#39;</pre></td>
        </tr>
      
        <tr>
          <td>FORCE_SCRIPT_NAME</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>DATETIME_FORMAT</td>
          <td class="code"><pre>&#39;N j, Y, P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_DOMAIN</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>INSTALLED_APPS</td>
          <td class="code"><pre>(&#39;django.contrib.admin&#39;,
 &#39;django.contrib.auth&#39;,
 &#39;django.contrib.contenttypes&#39;,
 &#39;django.contrib.sessions&#39;,
 &#39;django.contrib.messages&#39;,
 &#39;django.contrib.staticfiles&#39;,
 &#39;rest_framework&#39;,
 &#39;rest_framework.authtoken&#39;,
 &#39;django_extensions&#39;,
 &#39;vendor.djoser.djoser&#39;,
 &#39;legacy&#39;,
 &#39;api&#39;,
 &#39;apps&#39;,
 &#39;apps.chemical_analyses&#39;,
 &#39;apps.samples&#39;,
 &#39;apps.users&#39;)</pre></td>
        </tr>
      
        <tr>
          <td>DEBUG_PROPAGATE_EXCEPTIONS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_PORT</td>
          <td class="code"><pre>25</pre></td>
        </tr>
      
        <tr>
          <td>CACHE_MIDDLEWARE_SECONDS</td>
          <td class="code"><pre>600</pre></td>
        </tr>
      
        <tr>
          <td>EMAIL_BACKEND</td>
          <td class="code"><pre>&#39;django.core.mail.backends.smtp.EmailBackend&#39;</pre></td>
        </tr>
      
        <tr>
          <td>WSGI_APPLICATION</td>
          <td class="code"><pre>&#39;metpetdb_api.wsgi.application&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECRET_KEY</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGIN_REDIRECT_URL</td>
          <td class="code"><pre>&#39;/accounts/profile/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_CODE</td>
          <td class="code"><pre>&#39;en-us&#39;</pre></td>
        </tr>
      
        <tr>
          <td>AUTH_PASSWORD_VALIDATORS</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING</td>
          <td class="code"><pre>{&#39;handlers&#39;: {&#39;console&#39;: {&#39;class&#39;: &#39;logging.StreamHandler&#39;, &#39;level&#39;: &#39;DEBUG&#39;}},
 &#39;loggers&#39;: {&#39;django.request&#39;: {&#39;handlers&#39;: [&#39;console&#39;],
                                &#39;level&#39;: &#39;DEBUG&#39;,
                                &#39;propagate&#39;: True}},
 &#39;version&#39;: 1}</pre></td>
        </tr>
      
        <tr>
          <td>YEAR_MONTH_FORMAT</td>
          <td class="code"><pre>&#39;F Y&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONCURRENCY_HANDLER409</td>
          <td class="code"><pre>&#39;concurrency.views.conflict&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_CONTENT_TYPE</td>
          <td class="code"><pre>&#39;text/html&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_SSL_HOST</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>TIME_FORMAT</td>
          <td class="code"><pre>&#39;P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_HSTS_SECONDS</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_REDIRECT_EXEMPT</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>PASSWORD_HASHERS</td>
          <td class="code"><pre>&#39;********************&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_ETAGS</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>MEDIA_ROOT</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_AGE</td>
          <td class="code"><pre>31449600</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_TRUSTED_ORIGINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>AUTHENTICATION_BACKENDS</td>
          <td class="code"><pre>[&#39;django.contrib.auth.backends.ModelBackend&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>STATICFILES_FINDERS</td>
          <td class="code"><pre>[&#39;django.contrib.staticfiles.finders.FileSystemFinder&#39;,
 &#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>USE_X_FORWARDED_HOST</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_CACHE_ALIAS</td>
          <td class="code"><pre>&#39;default&#39;</pre></td>
        </tr>
      
        <tr>
          <td>LOGGING_CONFIG</td>
          <td class="code"><pre>&#39;logging.config.dictConfig&#39;</pre></td>
        </tr>
      
        <tr>
          <td>DEFAULT_TABLESPACE</td>
          <td class="code"><pre>&#39;&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_AGE</td>
          <td class="code"><pre>1209600</pre></td>
        </tr>
      
        <tr>
          <td>FIRST_DAY_OF_WEEK</td>
          <td class="code"><pre>0</pre></td>
        </tr>
      
        <tr>
          <td>SESSION_COOKIE_NAME</td>
          <td class="code"><pre>&#39;sessionid&#39;</pre></td>
        </tr>
      
        <tr>
          <td>ADMINS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>APPEND_SLASH</td>
          <td class="code"><pre>True</pre></td>
        </tr>
      
        <tr>
          <td>SECURE_PROXY_SSL_HEADER</td>
          <td class="code"><pre>None</pre></td>
        </tr>
      
        <tr>
          <td>TEMPLATE_LOADERS</td>
          <td class="code"><pre>[&#39;django.template.loaders.filesystem.Loader&#39;,
 &#39;django.template.loaders.app_directories.Loader&#39;]</pre></td>
        </tr>
      
        <tr>
          <td>ALLOWED_INCLUDE_ROOTS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>CSRF_COOKIE_NAME</td>
          <td class="code"><pre>&#39;csrftoken&#39;</pre></td>
        </tr>
      
        <tr>
          <td>SHORT_DATETIME_FORMAT</td>
          <td class="code"><pre>&#39;m/d/Y P&#39;</pre></td>
        </tr>
      
        <tr>
          <td>CONCURRENCY_POLICY</td>
          <td class="code"><pre>1</pre></td>
        </tr>
      
        <tr>
          <td>ROOT_URLCONF</td>
          <td class="code"><pre>&#39;metpetdb_api.urls&#39;</pre></td>
        </tr>
      
        <tr>
          <td>INTERNAL_IPS</td>
          <td class="code"><pre>[]</pre></td>
        </tr>
      
        <tr>
          <td>LANGUAGE_COOKIE_PATH</td>
          <td class="code"><pre>&#39;/&#39;</pre></td>
        </tr>
      
        <tr>
          <td>USE_THOUSAND_SEPARATOR</td>
          <td class="code"><pre>False</pre></td>
        </tr>
      
    </tbody>
  </table>

</div>

  <div id="explanation">
    <p>
      You're seeing this error because you have <code>DEBUG = True</code> in your
      Django settings file. Change that to <code>False</code>, and Django will
      display a standard page generated by the handler for this status code.
    </p>
  </div>

</body>
</html>
